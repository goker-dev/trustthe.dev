// This file is auto-generated by @hey-api/openapi-ts

export type ValidationErrorDto = {
  constraints: {
    [key: string]: unknown
  }
  property: string
  children?: Array<ValidationErrorDto>
}

export type ErrorDto = {
  status: number
  name: string
  message: string
  timestamp?: string
  method?: string
  path?: string
  stack?: string
  validations: Array<ValidationErrorDto>
}

export type ObjectId = {
  [key: string]: unknown
}

export type PaginationDto = {
  page?: number
  limit?: number
  search?: string
  status?: string
  role?: string
  type?: string
  ids?: Array<ObjectId>
  roles?: Array<
    | 'client'
    | 'api'
    | 'guest'
    | 'newbie'
    | 'needverify'
    | 'emailless'
    | 'phoneless'
    | 'passwordless'
    | 'user'
    | 'editor'
    | 'manager'
    | 'admin'
    | 'god'
    | 'chat'
  >
}

export type PaginatedMetaDto = {
  page?: number
  limit?: number
  total?: number
  item?: {
    [key: string]: unknown
  }
}

export type PaginatedDto = {
  meta: PaginatedMetaDto
  list: Array<Array<unknown>>
  parent?: {
    [key: string]: unknown
  }
}

export type CreateProjectDto = {
  name: string
}

export type OkDto = {
  /**
   * Successfull message
   */
  message: string
}

export type AvatarDto = {
  /**
   * Image source
   */
  src: string
  /**
   * Avatar type
   */
  type: number
}

export type Account = {
  provider: string
  identity: string
  isVerified: boolean
}

export type UserReadable = {
  /**
   * The name of the User
   */
  name: string
  accounts: Array<Account>
  /**
   * The password of the user.
   */
  password: string
  /**
   * All roles of the user.
   */
  roles: Array<string>
  /**
   * The unique username of the User
   */
  username?: string
  /**
   * Determines user is verified or not.
   */
  isVerified: boolean
  /**
   * It corresponds user is active or not.
   */
  isDeactivated: boolean
  createdAt: string
  /**
   * The unique id
   */
  readonly id: string
}

export type UserWritable = {
  /**
   * The name of the User
   */
  name: string
  accounts: Array<Account>
  /**
   * The password of the user.
   */
  password: string
  /**
   * All roles of the user.
   */
  roles: Array<string>
  /**
   * The unique username of the User
   */
  username?: string
  /**
   * Determines user is verified or not.
   */
  isVerified: boolean
  /**
   * It corresponds user is active or not.
   */
  isDeactivated: boolean
  createdAt: string
}

export type ProfileReadable = {
  avatar?: AvatarDto
  /**
   * The unique id
   */
  readonly id: string
  user: UserReadable
  /**
   * totalXp
   */
  totalXp: number
  /**
   * totalTicket
   */
  totalTicket: number
}

export type ProfileWritable = {
  avatar?: AvatarDto
  user: UserWritable
  /**
   * totalXp
   */
  totalXp: number
  /**
   * totalTicket
   */
  totalTicket: number
}

export type ProjectDtoReadable = {
  name: string
  /**
   * The unique id
   */
  createdBy: ProfileReadable
  /**
   * The unique id
   */
  readonly id: string
}

export type ProjectDtoWritable = {
  name: string
  /**
   * The unique id
   */
  createdBy: ProfileWritable
}

export type UpdateProjectDto = {
  name: string
}

export type ApiKeyDto = {
  key: string
}

export type ResponseStatusDto = {
  /**
   * Response status as boolean
   */
  status: boolean
}

export type TransactionReadable = {
  readonly createdAt: string
  /**
   * Activity definition. It should be unique. Use "ServiceName:method" pattern.
   */
  readonly definition: string
  project: ObjectId
  app: ObjectId
  /**
   * The user id of request owner
   */
  user: ObjectId
  /**
   * The session key of request owner
   */
  readonly session: string
  /**
   * The unique id
   */
  readonly id: string
  readonly amount: number
}

export type TransactionWritable = {
  project: ObjectId
  app: ObjectId
  /**
   * The user id of request owner
   */
  user: ObjectId
}

export type CreditDtoReadable = {
  /**
   * The user id of request owner
   */
  user: ObjectId
  /**
   * Credit balance
   */
  readonly balance: number
  transactions?: Array<TransactionReadable>
  /**
   * The unique id
   */
  readonly id: string
}

export type CreditDtoWritable = {
  /**
   * The user id of request owner
   */
  user: ObjectId
  transactions?: Array<TransactionWritable>
}

export type SeoBotDtoReadable = {
  name: string
  homepage: string
  description: string
  callbackUrl: string
  token: string
  tokenHash: string
  status:
    | 'draft'
    | 'hidden'
    | 'pending'
    | 'scheduled'
    | 'paused'
    | 'active'
    | 'completed'
    | 'published'
    | 'canceled'
  /**
   * The unique id
   */
  createdBy: ProfileReadable
  /**
   * The unique id
   */
  readonly id: string
}

export type SeoBotDtoWritable = {
  name: string
  homepage: string
  description: string
  callbackUrl: string
  token: string
  tokenHash: string
  status:
    | 'draft'
    | 'hidden'
    | 'pending'
    | 'scheduled'
    | 'paused'
    | 'active'
    | 'completed'
    | 'published'
    | 'canceled'
  /**
   * The unique id
   */
  createdBy: ProfileWritable
}

export type ApplicationDtoReadable = {
  readonly createdAt: string
  readonly updatedAt: string
  /**
   * The unique id
   */
  project: ObjectId
  name: string
  homepage: string
  description?: string
  callbackUrl?: string
  readonly token: string
  readonly tokenHash: string
  readonly chatToken: string
  /**
   * Type of [app]
   */
  type?: 'payment' | 'oauth'
  status:
    | 'draft'
    | 'hidden'
    | 'pending'
    | 'scheduled'
    | 'paused'
    | 'active'
    | 'completed'
    | 'published'
    | 'canceled'
  /**
   * The unique id
   */
  createdBy: ProfileReadable
  /**
   * The unique id
   */
  readonly id: string
}

export type ApplicationDtoWritable = {
  /**
   * The unique id
   */
  project: ObjectId
  name: string
  homepage: string
  description?: string
  callbackUrl?: string
  /**
   * Type of [app]
   */
  type?: 'payment' | 'oauth'
  status:
    | 'draft'
    | 'hidden'
    | 'pending'
    | 'scheduled'
    | 'paused'
    | 'active'
    | 'completed'
    | 'published'
    | 'canceled'
  /**
   * The unique id
   */
  createdBy: ProfileWritable
}

export type CreateApplicationDto = {
  /**
   * The unique id
   */
  project: ObjectId
  name: string
  homepage: string
  description?: string
  callbackUrl?: string
}

export type ResponseIdDto = {
  /**
   * Response id as string
   */
  id: string | null
}

export type UpdateApplicationDto = {
  name: string
  homepage: string
  description?: string
  callbackUrl?: string
  status:
    | 'draft'
    | 'hidden'
    | 'pending'
    | 'scheduled'
    | 'paused'
    | 'active'
    | 'completed'
    | 'published'
    | 'canceled'
}

export type RegisterDto = {
  /**
   * The name of the User
   */
  name: string
  /**
   * The password of the user.
   */
  password: string
  /**
   * The unique username of the User
   */
  username?: string
  /**
   * The email of the User
   */
  email?: string
  /**
   * The phone of the user
   */
  phone?: string
  /**
   * Invitation code
   */
  invitation?: string
}

export type AuthDto = {
  /**
   * The name of the User
   */
  name: string
  /**
   * All roles of the user.
   */
  roles: Array<string>
  /**
   * Session key
   */
  session: string
  accessToken: string
  refreshToken: string
}

export type LoginDto = {
  /**
   * The password of the user.
   */
  password: string
  /**
   * The username, email or sms number of the User
   */
  username: string
  /**
   * This is for extending the refresh token time.
   */
  remember: 0 | 1
}

export type ResendVerifyDto = {
  identity: string
}

export type RecoveryDto = {
  /**
   * The email of the User
   */
  email?: string
  /**
   * The phone of the user
   */
  phone?: string
}

export type ResponseMessageDto = {
  /**
   * Response message
   */
  message: string
}

export type ResetPasswordDto = {
  /**
   * The password of the user.
   */
  password: string
}

export type ResetResponseDto = {
  /**
   * The name of the User
   */
  name: string
  /**
   * All roles of the user.
   */
  roles: Array<string>
  /**
   * Session key
   */
  session: string
  accessToken: string
  refreshToken: string
}

export type Logout = {
  /**
   * Logout status
   */
  status: boolean
  /**
   * Logout message
   */
  message: string
}

export type UpdatePasswordDto = {
  /**
   * The password of the user.
   */
  password: string
  /**
   * The new password of the user.
   */
  newPassword: string
}

export type AccountInfoDto = {
  /**
   * The name of the User
   */
  name: string
  accounts: Array<Account>
  /**
   * All roles of the user.
   */
  roles: Array<string>
  /**
   * The unique username of the User
   */
  username?: string
  /**
   * Determines user is verified or not.
   */
  isVerified: boolean
  /**
   * It corresponds user is active or not.
   */
  isDeactivated: boolean
  createdAt: string
}

export type UpdateUserDto = {
  /**
   * The name of the User
   */
  name: string
}

export type UserSessionDto = {
  /**
   *  User device info associated with session
   */
  device: {
    [key: string]: unknown
  }
  /**
   *  User browser associated with session
   */
  browser: {
    [key: string]: unknown
  }
  /**
   *  User ip address associated with session
   */
  ip: string
  /**
   * corresponds country which is the user connecting from
   */
  location: {
    [key: string]: unknown
  }
  /**
   * corresponds session is active or not
   */
  isActive: boolean
  /**
   *  user session id.
   */
  sessionKey: string
}

export type DropSessionDto = {
  /**
   * Logout status
   */
  status: boolean
  /**
   * Logout message
   */
  message: string
}

export type UpdateUsernameDto = {
  /**
   * The unique username of the User
   */
  username?: string
}

export type BanDto = {
  /**
   * Logout status
   */
  status: boolean
  /**
   * Logout message
   */
  message: string
}

export type WalletLoginDto = {
  /**
   * Ref code
   */
  ref?: string
  /**
   * Ethereum account address
   */
  accountAddress: string
  /**
   * Signature for message
   */
  signature: string
  /**
   * Message for login
   */
  message: string
}

export type WalletLoginMessageDto = {
  /**
   * Message for login
   */
  message: string
}

export type SocialDisconnectDto = {
  id: string
}

export type VerifyDto = {
  /**
   * The data will be verify. Email or Phone
   */
  data: string
  /**
   * Verification code
   */
  code: string
  /**
   * Type of token
   */
  type: 'recovery' | 'verify'
}

export type VerifyResponseDto = {
  /**
   * The verify token
   */
  token: string
}

export type CreateConfigurationDto = {
  /**
   * The unique id
   */
  project: string
  name: string
  data?: Array<Array<string>>
}

export type ConfigurationDtoReadable = {
  /**
   * The unique id
   */
  project: string
  name: string
  data?: Array<Array<string>>
  status:
    | 'draft'
    | 'hidden'
    | 'pending'
    | 'scheduled'
    | 'paused'
    | 'active'
    | 'completed'
    | 'published'
    | 'canceled'
  /**
   * The unique id
   */
  createdBy: ProfileReadable
  /**
   * The unique id
   */
  readonly id: string
}

export type ConfigurationDtoWritable = {
  /**
   * The unique id
   */
  project: string
  name: string
  data?: Array<Array<string>>
  status:
    | 'draft'
    | 'hidden'
    | 'pending'
    | 'scheduled'
    | 'paused'
    | 'active'
    | 'completed'
    | 'published'
    | 'canceled'
  /**
   * The unique id
   */
  createdBy: ProfileWritable
}

export type UpdateConfigurationDto = {
  /**
   * The unique id
   */
  project: string
  name: string
  data?: Array<Array<string>>
}

export type AddAccountDto = {
  provider: string
  identity: string
  isVerified: boolean
}

export type AccountDto = {
  provider: string
  identity: string
  isVerified: boolean
}

export type CreateUserDto = {
  /**
   * The name of the User
   */
  name: string
  /**
   * The password of the user.
   */
  password: string
  /**
   * The unique username of the User
   */
  username?: string
  /**
   * The email of the User
   */
  email?: string
  /**
   * The phone of the user
   */
  phone?: string
  /**
   * Project ID
   */
  project: string
  /**
   * Determines user is verified or not.
   */
  isVerified: boolean
}

export type UserDtoReadable = {
  /**
   * The name of the User
   */
  name: string
  accounts: Array<Account>
  /**
   * All roles of the user.
   */
  roles: Array<string>
  /**
   * The unique username of the User
   */
  username?: string
  /**
   * Determines user is verified or not.
   */
  isVerified: boolean
  /**
   * It corresponds user is active or not.
   */
  isDeactivated: boolean
  createdAt: string
  /**
   * The unique id
   */
  readonly id: string
}

export type UserDtoWritable = {
  /**
   * The name of the User
   */
  name: string
  accounts: Array<Account>
  /**
   * All roles of the user.
   */
  roles: Array<string>
  /**
   * The unique username of the User
   */
  username?: string
  /**
   * Determines user is verified or not.
   */
  isVerified: boolean
  /**
   * It corresponds user is active or not.
   */
  isDeactivated: boolean
  createdAt: string
}

export type UpdateRolesDto = {
  /**
   * All roles of the user.
   */
  roles: Array<string>
}

export type UserPublicDtoReadable = {
  /**
   * The name of the User
   */
  name: string
  accounts: Array<Account>
  /**
   * The unique username of the User
   */
  username?: string
  /**
   * Determines user is verified or not.
   */
  isVerified: boolean
  /**
   * It corresponds user is active or not.
   */
  isDeactivated: boolean
  createdAt: string
  /**
   * The unique id
   */
  readonly id: string
}

export type UserPublicDtoWritable = {
  /**
   * The name of the User
   */
  name: string
  accounts: Array<Account>
  /**
   * The unique username of the User
   */
  username?: string
  /**
   * Determines user is verified or not.
   */
  isVerified: boolean
  /**
   * It corresponds user is active or not.
   */
  isDeactivated: boolean
  createdAt: string
}

export type ProfilePublicDtoReadable = {
  avatar?: AvatarDto
  /**
   * The unique id
   */
  readonly id: string
  user: UserPublicDtoReadable
}

export type ProfilePublicDtoWritable = {
  avatar?: AvatarDto
  user: UserPublicDtoWritable
}

export type ProfileDtoReadable = {
  avatar?: AvatarDto
  /**
   * The unique id
   */
  readonly id: string
  user: UserDtoReadable
}

export type ProfileDtoWritable = {
  avatar?: AvatarDto
  user: UserDtoWritable
}

export type UserInfoDto = {
  /**
   * The name of the User
   */
  name: string
  /**
   * The unique username of the User
   */
  username?: string
  createdAt: string
}

export type ProfileInfoDtoReadable = {
  avatar?: AvatarDto
  /**
   * The unique id
   */
  readonly id: string
  user: UserInfoDto
}

export type ProfileInfoDtoWritable = {
  avatar?: AvatarDto
  user: UserInfoDto
}

export type FileDto = {
  /**
   * File source
   */
  src: string
  /**
   * File type
   */
  type: string
  id?: string
}

export type TagCloudDto = {
  name: string
  usage: number
}

export type Exif = {
  Model: string
  Lens: string
  ISOSpeedRatings: string
  FocalLength: string
  FNumber: string
  ExposureTime: string
  WhiteBalance: string
  MeteringMode: string
  DateTime: string
  GPSLatitude: string
  GPSLongitude: string
}

export type Point = {
  type: string
  coordinates: Array<number>
}

export type NoteFileReadable = {
  src: string
  type?: string
  /**
   * The unique id
   */
  readonly id: string
  altText: string
  exif?: Exif
  location?: Point
}

export type NoteFileWritable = {
  src: string
  type?: string
  altText: string
  exif?: Exif
  location?: Point
}

export type PartialTypeClassReadable = {
  readonly createdAt?: string
  readonly updatedAt?: string
  /**
   * The unique id
   */
  project?: ObjectId
  domain?: string
  categories?: Array<string>
  title?: string
  slug?: string
  markdown?: string
  files?: Array<NoteFileReadable>
  tags?: Array<string>
  type?: 'section' | 'category' | 'page' | 'note' | 'content'
  status?:
    | 'draft'
    | 'hidden'
    | 'pending'
    | 'scheduled'
    | 'paused'
    | 'active'
    | 'completed'
    | 'published'
    | 'canceled'
  /**
   * The unique id
   */
  createdBy?: ObjectId
  /**
   * The unique id
   */
  readonly id?: string
}

export type PartialTypeClassWritable = {
  /**
   * The unique id
   */
  project?: ObjectId
  domain?: string
  categories?: Array<string>
  title?: string
  slug?: string
  markdown?: string
  files?: Array<NoteFileWritable>
  tags?: Array<string>
  type?: 'section' | 'category' | 'page' | 'note' | 'content'
  status?:
    | 'draft'
    | 'hidden'
    | 'pending'
    | 'scheduled'
    | 'paused'
    | 'active'
    | 'completed'
    | 'published'
    | 'canceled'
  /**
   * The unique id
   */
  createdBy?: ObjectId
}

export type NoteDtoReadable = {
  readonly createdAt: string
  readonly updatedAt: string
  /**
   * The unique id
   */
  project: ObjectId
  domain: string
  title: string
  slug: string
  markdown?: string
  files?: Array<NoteFileReadable>
  tags?: Array<string>
  type?: 'section' | 'category' | 'page' | 'note' | 'content'
  status?:
    | 'draft'
    | 'hidden'
    | 'pending'
    | 'scheduled'
    | 'paused'
    | 'active'
    | 'completed'
    | 'published'
    | 'canceled'
  /**
   * The unique id
   */
  createdBy: ObjectId
  /**
   * The unique id
   */
  readonly id: string
  categories?: Array<PartialTypeClassReadable>
}

export type NoteDtoWritable = {
  /**
   * The unique id
   */
  project: ObjectId
  domain: string
  title: string
  slug: string
  markdown?: string
  files?: Array<NoteFileWritable>
  tags?: Array<string>
  type?: 'section' | 'category' | 'page' | 'note' | 'content'
  status?:
    | 'draft'
    | 'hidden'
    | 'pending'
    | 'scheduled'
    | 'paused'
    | 'active'
    | 'completed'
    | 'published'
    | 'canceled'
  /**
   * The unique id
   */
  createdBy: ObjectId
  categories?: Array<PartialTypeClassWritable>
}

export type UpdateNoteFileDto = {
  altText: string
  location?: Point
}

export type CreateNoteDto = {
  /**
   * The unique id
   */
  project: ObjectId
  domain: string
  categories: Array<string>
  title: string
  slug: string
  markdown?: string
  tags?: Array<string>
  type?: 'section' | 'category' | 'page' | 'note' | 'content'
  status?:
    | 'draft'
    | 'hidden'
    | 'pending'
    | 'scheduled'
    | 'paused'
    | 'active'
    | 'completed'
    | 'published'
    | 'canceled'
  /**
   * The unique id
   */
  createdBy: ObjectId
}

export type UpdateFileDtoReadable = {
  /**
   * The unique id
   */
  readonly id: string
  altText: string
  location?: Point
}

export type UpdateFileDtoWritable = {
  altText: string
  location?: Point
}

export type UpdateNoteDtoReadable = {
  domain?: string
  title?: string
  slug?: string
  markdown?: string
  tags?: Array<string>
  type?: 'section' | 'category' | 'page' | 'note' | 'content'
  status?:
    | 'draft'
    | 'hidden'
    | 'pending'
    | 'scheduled'
    | 'paused'
    | 'active'
    | 'completed'
    | 'published'
    | 'canceled'
  categories?: Array<string>
  files?: Array<UpdateFileDtoReadable>
}

export type UpdateNoteDtoWritable = {
  domain?: string
  title?: string
  slug?: string
  markdown?: string
  tags?: Array<string>
  type?: 'section' | 'category' | 'page' | 'note' | 'content'
  status?:
    | 'draft'
    | 'hidden'
    | 'pending'
    | 'scheduled'
    | 'paused'
    | 'active'
    | 'completed'
    | 'published'
    | 'canceled'
  categories?: Array<string>
  files?: Array<UpdateFileDtoWritable>
}

export type UpsertNoteDtoReadable = {
  domain: string
  categories: Array<string>
  title: string
  slug: string
  markdown?: string
  files?: Array<NoteFileReadable>
  tags?: Array<string>
  type?: 'section' | 'category' | 'page' | 'note' | 'content'
  status?:
    | 'draft'
    | 'hidden'
    | 'pending'
    | 'scheduled'
    | 'paused'
    | 'active'
    | 'completed'
    | 'published'
    | 'canceled'
  /**
   * The unique id
   */
  id?: string
}

export type UpsertNoteDtoWritable = {
  domain: string
  categories: Array<string>
  title: string
  slug: string
  markdown?: string
  files?: Array<NoteFileWritable>
  tags?: Array<string>
  type?: 'section' | 'category' | 'page' | 'note' | 'content'
  status?:
    | 'draft'
    | 'hidden'
    | 'pending'
    | 'scheduled'
    | 'paused'
    | 'active'
    | 'completed'
    | 'published'
    | 'canceled'
  /**
   * The unique id
   */
  id?: string
}

export type OpenAiFileRefDto = {
  /**
   * The name of the file
   */
  name: string
  /**
   * A stable identifier for the file
   */
  id: string
  /**
   * The mime type of the file
   */
  mime_type: string
  /**
   * The URL to fetch the file which is valid for five minutes
   */
  download_link: string
}

export type OpenAiFileUploadDto = {
  /**
   * Array of OpenAI file references
   */
  openaiFileIdRefs: Array<OpenAiFileRefDto>
}

export type CreateSeoReportDto = {
  type: 'page' | 'page-term' | 'compare-page' | 'compare-page-term'
  dependencies?: Array<string>
  urls?: Array<string>
  terms?: Array<string>
}

export type SeoUrlReadable = {
  url: string
  /**
   * The unique id
   */
  readonly id: string
}

export type SeoUrlWritable = {
  url: string
}

export type SeoSearchTermReadable = {
  term: string
  /**
   * The unique id
   */
  readonly id: string
}

export type SeoSearchTermWritable = {
  term: string
}

export type SeoJobDtoReadable = {
  service: string
  method: string
  params?: Array<Array<string>>
  type: string
  status:
    | 'queued'
    | 'pending'
    | 'running'
    | 'paused'
    | 'stopped'
    | 'success'
    | 'failure'
    | 'retrying'
    | 'waiting-dependencies'
  readonly startedAt: string
  readonly completedAt: string
  readonly failedAt: string
  readonly retryingAt: string
  readonly retryCount: number
  maxRetries: number
  error: string
  dependencies: Array<string>
  /**
   * The unique id
   */
  readonly id: string
}

export type SeoJobDtoWritable = {
  service: string
  method: string
  params?: Array<Array<string>>
  type: string
  status:
    | 'queued'
    | 'pending'
    | 'running'
    | 'paused'
    | 'stopped'
    | 'success'
    | 'failure'
    | 'retrying'
    | 'waiting-dependencies'
  maxRetries: number
  error: string
  dependencies: Array<string>
}

export type SeoReportDtoReadable = {
  readonly createdAt: string
  readonly updatedAt: string
  type: 'page' | 'page-term' | 'compare-page' | 'compare-page-term'
  dependencies?: Array<string>
  /**
   * The unique id
   */
  readonly id: string
  url: SeoUrlReadable
  term: SeoSearchTermReadable
  pipeline: SeoJobDtoReadable
}

export type SeoReportDtoWritable = {
  type: 'page' | 'page-term' | 'compare-page' | 'compare-page-term'
  dependencies?: Array<string>
  url: SeoUrlWritable
  term: SeoSearchTermWritable
  pipeline: SeoJobDtoWritable
}

export type SeoWorkspaceDtoReadable = {
  readonly createdAt: string
  readonly updatedAt: string
  readonly user: string
  readonly lastReports: Array<SeoReportDtoReadable>
  readonly savedReports: Array<SeoReportDtoReadable>
  /**
   * The unique id
   */
  readonly id: string
}

export type UrlDetail = {
  domain: string
  tld: string
  subdomain: string
  pathname: string
  query: string
  hash: string
  depth: number
  length: number
}

export type Meta = {
  tag: string
  name: string
  property: string
  content: string
  httpEquiv: string
  charset: string
}

export type Rect = {
  x: number
  y: number
  width: number
  height: number
}

export type Heading = {
  tag: string
  position: Rect
  role: Rect
  level: number
  innerHTML: string
  fontSize: number
  fontWeight: number
  fontFamily: string
  fontColor: string
  backgroundColor: string
  contrastRatio: number
  hasHTML: boolean
  isVisible: boolean
}

export type Link = {
  title: string
  href: string
  ariaLabel: string
  ariaLabelledByTextContent: string
  ariaHidden: boolean
  target: string
  tabIndex: number
  isKeyboardAccessible: boolean
  position: Rect
  role: Rect
  tag: string
  rel: string
  innerHTML: string
  fontSize: number
  fontWeight: number
  fontFamily: string
  fontColor: string
  backgroundColor: string
  contrastRatio: number
  hasHTML: boolean
  isVisible: boolean
  /**
   * Type of link (internal, external, anchor, etc.)
   */
  type:
    | 'internal'
    | 'external'
    | 'anchor'
    | 'email'
    | 'phone'
    | 'download'
    | 'javascript'
    | 'unknown'
}

export type ContrastIssue = {
  selector: string
  elementTextSnippet: string
  fontColor: string
  backgroundColor: string
  contrastRatio: number
  wcagLevelFail: 'AA' | 'AAA' | null
}

export type EngagementFeatures = {
  /**
   * Indicates if a comment section is present on the page
   */
  commentSectionPresent: boolean
  /**
   * Indicates if social sharing buttons are present on the page
   */
  socialSharingButtonsPresent: boolean
  /**
   * Count of video embeds found on the page
   */
  videoEmbedsCount: number
}

export type SeoUrlDtoReadable = {
  url: string
  /**
   * The unique id
   */
  readonly id: string
}

export type SeoUrlDtoWritable = {
  url: string
}

export type SeoPageDtoReadable = {
  readonly createdAt: string
  readonly updatedAt: string
  readonly title: string
  urlDetails: UrlDetail
  meta: Array<Meta>
  headings: Array<Heading>
  links: Array<Link>
  content: string
  contrastIssues: Array<ContrastIssue>
  fleschReadingEase: number
  fleschKincaidGradeLevel: number
  smogGrade: number
  gunningFogScore: number
  colemanLiauIndex: number
  automatedReadabilityIndex: number
  daleChallReadabilityScore: number
  wordCount: number
  sentenceCount: number
  paragraphCount: number
  averageWordsPerSentence: number
  averageSentenceLength: number
  longSentencesCount: number
  readonly complexWordRatio: number
  readonly contentSimilarityToCompetitorAverage: number
  readonly viewportMetaTagPresent: boolean
  readonly urlDepth: number
  readonly urlLength: number
  readonly urlHasKeywords: boolean
  readonly htmlSizeBytes: number
  engagementFeatures: EngagementFeatures
  readonly suggestedKeywords: Array<string>
  /**
   * The unique id
   */
  readonly id: string
  url: SeoUrlDtoReadable
}

export type SeoPageDtoWritable = {
  urlDetails: UrlDetail
  meta: Array<Meta>
  headings: Array<Heading>
  links: Array<Link>
  content: string
  contrastIssues: Array<ContrastIssue>
  fleschReadingEase: number
  fleschKincaidGradeLevel: number
  smogGrade: number
  gunningFogScore: number
  colemanLiauIndex: number
  automatedReadabilityIndex: number
  daleChallReadabilityScore: number
  wordCount: number
  sentenceCount: number
  paragraphCount: number
  averageWordsPerSentence: number
  averageSentenceLength: number
  longSentencesCount: number
  engagementFeatures: EngagementFeatures
  url: SeoUrlDtoWritable
}

export type UrlAnalysis = {
  termInSlug: boolean
  length: number
  termInPath: boolean
  termInDomain: boolean
  termInSubdomain: boolean
  depth: number
}

export type NlpAnalysis = {
  name: string
  termPresent: boolean
  termCount: number
  termLocation: string
  termDensityScore: number
  sentiment: string
  semantic_relatedness_score: number
  prominent_keyphrases: Array<string>
  tfidf_score: number
  has_cta: boolean
}

export type HeadingAnalysis = {
  h1: NlpAnalysis
  relevantSubheadingsCount: number
  headingHierarchyAnalysis: string
}

export type SeoPageTermDtoReadable = {
  readonly createdAt: string
  readonly updatedAt: string
  url: UrlAnalysis
  title: NlpAnalysis
  meta: Array<NlpAnalysis>
  headings: HeadingAnalysis
  content: NlpAnalysis
  /**
   * The unique id
   */
  readonly id: string
}

export type SeoPageTermDtoWritable = {
  url: UrlAnalysis
  title: NlpAnalysis
  meta: Array<NlpAnalysis>
  headings: HeadingAnalysis
  content: NlpAnalysis
}

export type BarcodeDtoReadable = {
  readonly barcode: string
}

export type CreatePttDto = {
  /**
   * The unique id
   */
  project: string
  name: string
  barcode: string
  data?: {
    [key: string]: string
  }
}

export type PttDtoReadable = {
  /**
   * The unique id
   */
  project: string
  name: string
  barcode: string
  status:
    | 'draft'
    | 'hidden'
    | 'pending'
    | 'scheduled'
    | 'paused'
    | 'active'
    | 'completed'
    | 'published'
    | 'canceled'
  /**
   * The unique id
   */
  createdBy: ProfileReadable
  /**
   * The unique id
   */
  readonly id: string
  data?: {
    [key: string]: string
  }
}

export type PttDtoWritable = {
  /**
   * The unique id
   */
  project: string
  name: string
  barcode: string
  status:
    | 'draft'
    | 'hidden'
    | 'pending'
    | 'scheduled'
    | 'paused'
    | 'active'
    | 'completed'
    | 'published'
    | 'canceled'
  /**
   * The unique id
   */
  createdBy: ProfileWritable
  data?: {
    [key: string]: string
  }
}

export type UpdatePttDto = {
  name: string
  data?: {
    [key: string]: string
  }
}

export type HealthControllerCheckData = {
  body?: never
  path?: never
  query?: never
  url: '/health'
}

export type HealthControllerCheckErrors = {
  /**
   * The Health Check is not successful
   */
  503: {
    status?: string
    info?: {
      [key: string]: {
        status?: string
        [key: string]: string | undefined
      }
    } | null
    error?: {
      [key: string]: {
        status?: string
        [key: string]: string | undefined
      }
    } | null
    details?: {
      [key: string]: {
        status?: string
        [key: string]: string | undefined
      }
    }
  }
}

export type HealthControllerCheckError =
  HealthControllerCheckErrors[keyof HealthControllerCheckErrors]

export type HealthControllerCheckResponses = {
  /**
   * The Health Check is successful
   */
  200: {
    status?: string
    info?: {
      [key: string]: {
        status?: string
        [key: string]: string | undefined
      }
    } | null
    error?: {
      [key: string]: {
        status?: string
        [key: string]: string | undefined
      }
    } | null
    details?: {
      [key: string]: {
        status?: string
        [key: string]: string | undefined
      }
    }
  }
}

export type HealthControllerCheckResponse =
  HealthControllerCheckResponses[keyof HealthControllerCheckResponses]

export type ProjectsControllerFindAllData = {
  body?: never
  path?: never
  query?: {
    page?: number
    limit?: number
    search?: string
    status?: string
    role?: string
    type?: string
    roles?: Array<
      | 'client'
      | 'api'
      | 'guest'
      | 'newbie'
      | 'needverify'
      | 'emailless'
      | 'phoneless'
      | 'passwordless'
      | 'user'
      | 'editor'
      | 'manager'
      | 'admin'
      | 'god'
      | 'chat'
    >
  }
  url: '/projects'
}

export type ProjectsControllerFindAllErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type ProjectsControllerFindAllError =
  ProjectsControllerFindAllErrors[keyof ProjectsControllerFindAllErrors]

export type ProjectsControllerFindAllResponses = {
  /**
   * Successfully received model list
   */
  200: PaginatedDto & {
    list?: Array<ProjectDtoReadable>
    meta?: PaginatedMetaDto
    parent?: unknown
  }
}

export type ProjectsControllerFindAllResponse =
  ProjectsControllerFindAllResponses[keyof ProjectsControllerFindAllResponses]

export type ProjectsControllerCreateData = {
  body: CreateProjectDto
  path?: never
  query?: never
  url: '/projects'
}

export type ProjectsControllerCreateErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type ProjectsControllerCreateError =
  ProjectsControllerCreateErrors[keyof ProjectsControllerCreateErrors]

export type ProjectsControllerCreateResponses = {
  201: OkDto
}

export type ProjectsControllerCreateResponse =
  ProjectsControllerCreateResponses[keyof ProjectsControllerCreateResponses]

export type ProjectsControllerRemoveData = {
  body?: never
  path: {
    id: string
  }
  query?: never
  url: '/projects/{id}'
}

export type ProjectsControllerRemoveErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type ProjectsControllerRemoveError =
  ProjectsControllerRemoveErrors[keyof ProjectsControllerRemoveErrors]

export type ProjectsControllerRemoveResponses = {
  200: string
}

export type ProjectsControllerRemoveResponse =
  ProjectsControllerRemoveResponses[keyof ProjectsControllerRemoveResponses]

export type ProjectsControllerFindOneData = {
  body?: never
  path: {
    id: string
  }
  query?: never
  url: '/projects/{id}'
}

export type ProjectsControllerFindOneErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type ProjectsControllerFindOneError =
  ProjectsControllerFindOneErrors[keyof ProjectsControllerFindOneErrors]

export type ProjectsControllerFindOneResponses = {
  200: ProjectDtoReadable
}

export type ProjectsControllerFindOneResponse =
  ProjectsControllerFindOneResponses[keyof ProjectsControllerFindOneResponses]

export type ProjectsControllerUpdateData = {
  body: UpdateProjectDto
  path: {
    id: string
  }
  query?: never
  url: '/projects/{id}'
}

export type ProjectsControllerUpdateErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type ProjectsControllerUpdateError =
  ProjectsControllerUpdateErrors[keyof ProjectsControllerUpdateErrors]

export type ProjectsControllerUpdateResponses = {
  200: ProjectDtoReadable
}

export type ProjectsControllerUpdateResponse =
  ProjectsControllerUpdateResponses[keyof ProjectsControllerUpdateResponses]

export type ProjectsControllerGenerateNewApiKeyData = {
  body?: never
  path: {
    id: string
  }
  query?: never
  url: '/projects/{id}/generate-api-key'
}

export type ProjectsControllerGenerateNewApiKeyErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type ProjectsControllerGenerateNewApiKeyError =
  ProjectsControllerGenerateNewApiKeyErrors[keyof ProjectsControllerGenerateNewApiKeyErrors]

export type ProjectsControllerGenerateNewApiKeyResponses = {
  200: ApiKeyDto
}

export type ProjectsControllerGenerateNewApiKeyResponse =
  ProjectsControllerGenerateNewApiKeyResponses[keyof ProjectsControllerGenerateNewApiKeyResponses]

export type CreditControllerAddFirstBalanceData = {
  body?: never
  path?: never
  query?: never
  url: '/Credit/first-balance'
}

export type CreditControllerAddFirstBalanceErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type CreditControllerAddFirstBalanceError =
  CreditControllerAddFirstBalanceErrors[keyof CreditControllerAddFirstBalanceErrors]

export type CreditControllerAddFirstBalanceResponses = {
  200: ResponseStatusDto
  201: ResponseStatusDto
}

export type CreditControllerAddFirstBalanceResponse =
  CreditControllerAddFirstBalanceResponses[keyof CreditControllerAddFirstBalanceResponses]

export type CreditControllerBalanceData = {
  body?: never
  path?: never
  query?: never
  url: '/Credit/balance'
}

export type CreditControllerBalanceErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type CreditControllerBalanceError =
  CreditControllerBalanceErrors[keyof CreditControllerBalanceErrors]

export type CreditControllerBalanceResponses = {
  200: number
}

export type CreditControllerBalanceResponse =
  CreditControllerBalanceResponses[keyof CreditControllerBalanceResponses]

export type CreditControllerTransactionsData = {
  body?: never
  path?: never
  query?: never
  url: '/Credit/transactions'
}

export type CreditControllerTransactionsErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type CreditControllerTransactionsError =
  CreditControllerTransactionsErrors[keyof CreditControllerTransactionsErrors]

export type CreditControllerTransactionsResponses = {
  200: CreditDtoReadable
}

export type CreditControllerTransactionsResponse =
  CreditControllerTransactionsResponses[keyof CreditControllerTransactionsResponses]

export type ApplicationsControllerNewTokenData = {
  body?: never
  path: {
    id: string
  }
  query?: never
  url: '/applications/{id}/new-token'
}

export type ApplicationsControllerNewTokenErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type ApplicationsControllerNewTokenError =
  ApplicationsControllerNewTokenErrors[keyof ApplicationsControllerNewTokenErrors]

export type ApplicationsControllerNewTokenResponses = {
  200: SeoBotDtoReadable
}

export type ApplicationsControllerNewTokenResponse =
  ApplicationsControllerNewTokenResponses[keyof ApplicationsControllerNewTokenResponses]

export type ApplicationsControllerChatTokenData = {
  body?: never
  path: {
    id: string
  }
  query?: never
  url: '/applications/{id}/chat-token'
}

export type ApplicationsControllerChatTokenErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type ApplicationsControllerChatTokenError =
  ApplicationsControllerChatTokenErrors[keyof ApplicationsControllerChatTokenErrors]

export type ApplicationsControllerChatTokenResponses = {
  200: ApplicationDtoReadable
}

export type ApplicationsControllerChatTokenResponse =
  ApplicationsControllerChatTokenResponses[keyof ApplicationsControllerChatTokenResponses]

export type ApplicationsControllerFindAllData = {
  body?: never
  path?: never
  query?: {
    page?: number
    limit?: number
    search?: string
    status?: string
    role?: string
    type?: string
    roles?: Array<
      | 'client'
      | 'api'
      | 'guest'
      | 'newbie'
      | 'needverify'
      | 'emailless'
      | 'phoneless'
      | 'passwordless'
      | 'user'
      | 'editor'
      | 'manager'
      | 'admin'
      | 'god'
      | 'chat'
    >
  }
  url: '/applications'
}

export type ApplicationsControllerFindAllErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type ApplicationsControllerFindAllError =
  ApplicationsControllerFindAllErrors[keyof ApplicationsControllerFindAllErrors]

export type ApplicationsControllerFindAllResponses = {
  /**
   * Successfully received model list
   */
  200: PaginatedDto & {
    list?: Array<ApplicationDtoReadable>
    meta?: PaginatedMetaDto
    parent?: unknown
  }
}

export type ApplicationsControllerFindAllResponse =
  ApplicationsControllerFindAllResponses[keyof ApplicationsControllerFindAllResponses]

export type ApplicationsControllerCreateData = {
  body: CreateApplicationDto
  path?: never
  query?: never
  url: '/applications'
}

export type ApplicationsControllerCreateErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type ApplicationsControllerCreateError =
  ApplicationsControllerCreateErrors[keyof ApplicationsControllerCreateErrors]

export type ApplicationsControllerCreateResponses = {
  201: ResponseIdDto
}

export type ApplicationsControllerCreateResponse =
  ApplicationsControllerCreateResponses[keyof ApplicationsControllerCreateResponses]

export type ApplicationsControllerDeleteData = {
  body?: never
  path: {
    id: string
  }
  query?: never
  url: '/applications/{id}'
}

export type ApplicationsControllerDeleteErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type ApplicationsControllerDeleteError =
  ApplicationsControllerDeleteErrors[keyof ApplicationsControllerDeleteErrors]

export type ApplicationsControllerDeleteResponses = {
  200: ResponseIdDto
  201: ResponseIdDto
}

export type ApplicationsControllerDeleteResponse =
  ApplicationsControllerDeleteResponses[keyof ApplicationsControllerDeleteResponses]

export type ApplicationsControllerFindOneData = {
  body?: never
  path: {
    id: string
  }
  query?: never
  url: '/applications/{id}'
}

export type ApplicationsControllerFindOneErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type ApplicationsControllerFindOneError =
  ApplicationsControllerFindOneErrors[keyof ApplicationsControllerFindOneErrors]

export type ApplicationsControllerFindOneResponses = {
  200: ApplicationDtoReadable
}

export type ApplicationsControllerFindOneResponse =
  ApplicationsControllerFindOneResponses[keyof ApplicationsControllerFindOneResponses]

export type ApplicationsControllerUpdateData = {
  body: UpdateApplicationDto
  path: {
    id: string
  }
  query?: never
  url: '/applications/{id}'
}

export type ApplicationsControllerUpdateErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type ApplicationsControllerUpdateError =
  ApplicationsControllerUpdateErrors[keyof ApplicationsControllerUpdateErrors]

export type ApplicationsControllerUpdateResponses = {
  200: ResponseIdDto
}

export type ApplicationsControllerUpdateResponse =
  ApplicationsControllerUpdateResponses[keyof ApplicationsControllerUpdateResponses]

export type ProjectsApplicationsControllerFindAllByProjectIdData = {
  body?: never
  path: {
    id: string
  }
  query?: {
    page?: number
    limit?: number
    search?: string
    status?: string
    role?: string
    type?: string
    roles?: Array<
      | 'client'
      | 'api'
      | 'guest'
      | 'newbie'
      | 'needverify'
      | 'emailless'
      | 'phoneless'
      | 'passwordless'
      | 'user'
      | 'editor'
      | 'manager'
      | 'admin'
      | 'god'
      | 'chat'
    >
  }
  url: '/projects/{id}/applications'
}

export type ProjectsApplicationsControllerFindAllByProjectIdErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type ProjectsApplicationsControllerFindAllByProjectIdError =
  ProjectsApplicationsControllerFindAllByProjectIdErrors[keyof ProjectsApplicationsControllerFindAllByProjectIdErrors]

export type ProjectsApplicationsControllerFindAllByProjectIdResponses = {
  /**
   * Successfully received model list
   */
  200: PaginatedDto & {
    list?: Array<ApplicationDtoReadable>
    meta?: PaginatedMetaDto
    parent?: unknown
  }
}

export type ProjectsApplicationsControllerFindAllByProjectIdResponse =
  ProjectsApplicationsControllerFindAllByProjectIdResponses[keyof ProjectsApplicationsControllerFindAllByProjectIdResponses]

export type AuthControllerRegisterData = {
  body: RegisterDto
  path?: never
  query?: never
  url: '/auth/register'
}

export type AuthControllerRegisterErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type AuthControllerRegisterError =
  AuthControllerRegisterErrors[keyof AuthControllerRegisterErrors]

export type AuthControllerRegisterResponses = {
  /**
   *  User created!
   */
  201: AuthDto
}

export type AuthControllerRegisterResponse =
  AuthControllerRegisterResponses[keyof AuthControllerRegisterResponses]

export type AuthControllerLoginData = {
  body: LoginDto
  path?: never
  query?: never
  url: '/auth/login'
}

export type AuthControllerLoginErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type AuthControllerLoginError =
  AuthControllerLoginErrors[keyof AuthControllerLoginErrors]

export type AuthControllerLoginResponses = {
  200: AuthDto
}

export type AuthControllerLoginResponse =
  AuthControllerLoginResponses[keyof AuthControllerLoginResponses]

export type AuthControllerRefreshData = {
  body?: never
  path?: never
  query?: never
  url: '/auth/refresh'
}

export type AuthControllerRefreshErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type AuthControllerRefreshError =
  AuthControllerRefreshErrors[keyof AuthControllerRefreshErrors]

export type AuthControllerRefreshResponses = {
  201: AuthDto
}

export type AuthControllerRefreshResponse =
  AuthControllerRefreshResponses[keyof AuthControllerRefreshResponses]

export type AuthControllerUnVerifiedAccountsData = {
  body?: never
  path?: never
  query?: never
  url: '/auth/verify'
}

export type AuthControllerUnVerifiedAccountsErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type AuthControllerUnVerifiedAccountsError =
  AuthControllerUnVerifiedAccountsErrors[keyof AuthControllerUnVerifiedAccountsErrors]

export type AuthControllerUnVerifiedAccountsResponses = {
  /**
   * Account list for verification.
   */
  200: Array<Account>
}

export type AuthControllerUnVerifiedAccountsResponse =
  AuthControllerUnVerifiedAccountsResponses[keyof AuthControllerUnVerifiedAccountsResponses]

export type AuthControllerResendVerifyData = {
  body: ResendVerifyDto
  path?: never
  query?: never
  url: '/auth/verify'
}

export type AuthControllerResendVerifyErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type AuthControllerResendVerifyError =
  AuthControllerResendVerifyErrors[keyof AuthControllerResendVerifyErrors]

export type AuthControllerResendVerifyResponses = {
  /**
   * Verification trigger
   */
  200: OkDto
}

export type AuthControllerResendVerifyResponse =
  AuthControllerResendVerifyResponses[keyof AuthControllerResendVerifyResponses]

export type AuthControllerVerifyData = {
  body?: never
  path?: never
  query?: never
  url: '/auth/verify'
}

export type AuthControllerVerifyErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type AuthControllerVerifyError =
  AuthControllerVerifyErrors[keyof AuthControllerVerifyErrors]

export type AuthControllerVerifyResponses = {
  /**
   *
   */
  200: AuthDto
  201: AuthDto
}

export type AuthControllerVerifyResponse =
  AuthControllerVerifyResponses[keyof AuthControllerVerifyResponses]

export type AuthControllerRecoveryData = {
  body: RecoveryDto
  path?: never
  query?: never
  url: '/auth/recovery'
}

export type AuthControllerRecoveryErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type AuthControllerRecoveryError =
  AuthControllerRecoveryErrors[keyof AuthControllerRecoveryErrors]

export type AuthControllerRecoveryResponses = {
  /**
   *
   */
  200: ResponseMessageDto
  201: OkDto
}

export type AuthControllerRecoveryResponse =
  AuthControllerRecoveryResponses[keyof AuthControllerRecoveryResponses]

export type AuthControllerResetData = {
  body: ResetPasswordDto
  path?: never
  query?: never
  url: '/auth/reset'
}

export type AuthControllerResetErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type AuthControllerResetError =
  AuthControllerResetErrors[keyof AuthControllerResetErrors]

export type AuthControllerResetResponses = {
  200: ResetResponseDto
  201: ResetResponseDto
}

export type AuthControllerResetResponse =
  AuthControllerResetResponses[keyof AuthControllerResetResponses]

export type AuthControllerLogoutData = {
  body?: never
  path?: never
  query?: never
  url: '/auth/logout'
}

export type AuthControllerLogoutErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type AuthControllerLogoutError =
  AuthControllerLogoutErrors[keyof AuthControllerLogoutErrors]

export type AuthControllerLogoutResponses = {
  201: Logout
}

export type AuthControllerLogoutResponse =
  AuthControllerLogoutResponses[keyof AuthControllerLogoutResponses]

export type AuthControllerChangePasswordData = {
  body: UpdatePasswordDto
  path?: never
  query?: never
  url: '/auth/change-password'
}

export type AuthControllerChangePasswordErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type AuthControllerChangePasswordError =
  AuthControllerChangePasswordErrors[keyof AuthControllerChangePasswordErrors]

export type AuthControllerChangePasswordResponses = {
  200: ResponseMessageDto
}

export type AuthControllerChangePasswordResponse =
  AuthControllerChangePasswordResponses[keyof AuthControllerChangePasswordResponses]

export type AuthControllerAccountInfoData = {
  body?: never
  path?: never
  query?: never
  url: '/auth/account/info'
}

export type AuthControllerAccountInfoErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type AuthControllerAccountInfoError =
  AuthControllerAccountInfoErrors[keyof AuthControllerAccountInfoErrors]

export type AuthControllerAccountInfoResponses = {
  /**
   *  object of user information.
   */
  200: AccountInfoDto
}

export type AuthControllerAccountInfoResponse =
  AuthControllerAccountInfoResponses[keyof AuthControllerAccountInfoResponses]

export type AuthControllerUpdateAccountInfoData = {
  body: UpdateUserDto
  path?: never
  query?: never
  url: '/auth/account/info'
}

export type AuthControllerUpdateAccountInfoErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type AuthControllerUpdateAccountInfoError =
  AuthControllerUpdateAccountInfoErrors[keyof AuthControllerUpdateAccountInfoErrors]

export type AuthControllerUpdateAccountInfoResponses = {
  200: AccountInfoDto
  /**
   *  object of user information.
   */
  201: AccountInfoDto
}

export type AuthControllerUpdateAccountInfoResponse =
  AuthControllerUpdateAccountInfoResponses[keyof AuthControllerUpdateAccountInfoResponses]

export type AuthControllerRoleDropData = {
  body?: never
  path?: never
  query?: never
  url: '/auth/role-drop'
}

export type AuthControllerRoleDropErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type AuthControllerRoleDropError =
  AuthControllerRoleDropErrors[keyof AuthControllerRoleDropErrors]

export type AuthControllerRoleDropResponses = {
  /**
   *  RoleEnum updated successfully.
   */
  200: OkDto
}

export type AuthControllerRoleDropResponse =
  AuthControllerRoleDropResponses[keyof AuthControllerRoleDropResponses]

export type AuthControllerDeactivateData = {
  body?: never
  path?: never
  query?: never
  url: '/auth/deactivate'
}

export type AuthControllerDeactivateErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type AuthControllerDeactivateError =
  AuthControllerDeactivateErrors[keyof AuthControllerDeactivateErrors]

export type AuthControllerDeactivateResponses = {
  /**
   *  RoleEnum updated successfully.
   */
  200: OkDto
}

export type AuthControllerDeactivateResponse =
  AuthControllerDeactivateResponses[keyof AuthControllerDeactivateResponses]

export type AuthControllerSessionsData = {
  body?: never
  path?: never
  query?: never
  url: '/auth/sessions'
}

export type AuthControllerSessionsErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type AuthControllerSessionsError =
  AuthControllerSessionsErrors[keyof AuthControllerSessionsErrors]

export type AuthControllerSessionsResponses = {
  /**
   *
   */
  200: Array<UserSessionDto>
}

export type AuthControllerSessionsResponse =
  AuthControllerSessionsResponses[keyof AuthControllerSessionsResponses]

export type AuthControllerLoginActivityData = {
  body?: never
  path?: never
  query?: never
  url: '/auth/login-activity'
}

export type AuthControllerLoginActivityErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type AuthControllerLoginActivityError =
  AuthControllerLoginActivityErrors[keyof AuthControllerLoginActivityErrors]

export type AuthControllerLoginActivityResponses = {
  /**
   *
   */
  200: Array<UserSessionDto>
}

export type AuthControllerLoginActivityResponse =
  AuthControllerLoginActivityResponses[keyof AuthControllerLoginActivityResponses]

export type AuthControllerDropData = {
  body?: never
  path: {
    key: string
  }
  query?: never
  url: '/auth/drop/{key}'
}

export type AuthControllerDropErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type AuthControllerDropError =
  AuthControllerDropErrors[keyof AuthControllerDropErrors]

export type AuthControllerDropResponses = {
  200: DropSessionDto
}

export type AuthControllerDropResponse =
  AuthControllerDropResponses[keyof AuthControllerDropResponses]

export type AuthControllerSetUsernameData = {
  body: UpdateUsernameDto
  path?: never
  query?: never
  url: '/auth/username'
}

export type AuthControllerSetUsernameErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type AuthControllerSetUsernameError =
  AuthControllerSetUsernameErrors[keyof AuthControllerSetUsernameErrors]

export type AuthControllerSetUsernameResponses = {
  200: OkDto
}

export type AuthControllerSetUsernameResponse =
  AuthControllerSetUsernameResponses[keyof AuthControllerSetUsernameResponses]

export type AuthControllerBanData = {
  body?: never
  path?: never
  query: {
    id: string
    ttlSecond?: string
  }
  url: '/auth/ban'
}

export type AuthControllerBanErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type AuthControllerBanError =
  AuthControllerBanErrors[keyof AuthControllerBanErrors]

export type AuthControllerBanResponses = {
  200: BanDto
}

export type AuthControllerBanResponse =
  AuthControllerBanResponses[keyof AuthControllerBanResponses]

export type WalletControllerAuthenticateData = {
  body: WalletLoginDto
  path?: never
  query?: never
  url: '/auth/wallet'
}

export type WalletControllerAuthenticateErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type WalletControllerAuthenticateError =
  WalletControllerAuthenticateErrors[keyof WalletControllerAuthenticateErrors]

export type WalletControllerAuthenticateResponses = {
  /**
   * It returns WalletResponseDto
   */
  201: AuthDto
}

export type WalletControllerAuthenticateResponse =
  WalletControllerAuthenticateResponses[keyof WalletControllerAuthenticateResponses]

export type WalletControllerGetMetamaskLoginMessageData = {
  body?: never
  path?: never
  query: {
    wallet: string
  }
  url: '/auth/wallet/metamaskloginmessage'
}

export type WalletControllerGetMetamaskLoginMessageErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type WalletControllerGetMetamaskLoginMessageError =
  WalletControllerGetMetamaskLoginMessageErrors[keyof WalletControllerGetMetamaskLoginMessageErrors]

export type WalletControllerGetMetamaskLoginMessageResponses = {
  /**
   * It returns Metamask Login Message String
   */
  200: WalletLoginMessageDto
}

export type WalletControllerGetMetamaskLoginMessageResponse =
  WalletControllerGetMetamaskLoginMessageResponses[keyof WalletControllerGetMetamaskLoginMessageResponses]

export type WalletControllerDisconnectWalletData = {
  body: SocialDisconnectDto
  path?: never
  query?: never
  url: '/auth/wallet/disconnect'
}

export type WalletControllerDisconnectWalletErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type WalletControllerDisconnectWalletError =
  WalletControllerDisconnectWalletErrors[keyof WalletControllerDisconnectWalletErrors]

export type WalletControllerDisconnectWalletResponses = {
  /**
   * It returns success message
   */
  200: WalletLoginMessageDto
  201: WalletLoginMessageDto
}

export type WalletControllerDisconnectWalletResponse =
  WalletControllerDisconnectWalletResponses[keyof WalletControllerDisconnectWalletResponses]

export type WalletControllerConnectWalletData = {
  body: WalletLoginDto
  path?: never
  query?: never
  url: '/auth/wallet/connect'
}

export type WalletControllerConnectWalletErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type WalletControllerConnectWalletError =
  WalletControllerConnectWalletErrors[keyof WalletControllerConnectWalletErrors]

export type WalletControllerConnectWalletResponses = {
  /**
   * It returns WalletResponseDto
   */
  201: WalletLoginMessageDto
}

export type WalletControllerConnectWalletResponse =
  WalletControllerConnectWalletResponses[keyof WalletControllerConnectWalletResponses]

export type VerificationControllerVerifyData = {
  body: VerifyDto
  path?: never
  query?: never
  url: '/verification'
}

export type VerificationControllerVerifyErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type VerificationControllerVerifyError =
  VerificationControllerVerifyErrors[keyof VerificationControllerVerifyErrors]

export type VerificationControllerVerifyResponses = {
  200: VerifyResponseDto
  201: VerifyResponseDto
}

export type VerificationControllerVerifyResponse =
  VerificationControllerVerifyResponses[keyof VerificationControllerVerifyResponses]

export type ConfigurationControllerFindAllData = {
  body?: never
  path?: never
  query?: {
    page?: number
    limit?: number
    search?: string
    status?: string
    role?: string
    type?: string
    /**
     * The unique id
     */
    project?: string
    roles?: Array<
      | 'client'
      | 'api'
      | 'guest'
      | 'newbie'
      | 'needverify'
      | 'emailless'
      | 'phoneless'
      | 'passwordless'
      | 'user'
      | 'editor'
      | 'manager'
      | 'admin'
      | 'god'
      | 'chat'
    >
  }
  url: '/configurations'
}

export type ConfigurationControllerFindAllErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type ConfigurationControllerFindAllError =
  ConfigurationControllerFindAllErrors[keyof ConfigurationControllerFindAllErrors]

export type ConfigurationControllerFindAllResponses = {
  /**
   * Successfully received model list
   */
  200: PaginatedDto & {
    list?: Array<ConfigurationDtoReadable>
    meta?: PaginatedMetaDto
    parent?: unknown
  }
}

export type ConfigurationControllerFindAllResponse =
  ConfigurationControllerFindAllResponses[keyof ConfigurationControllerFindAllResponses]

export type ConfigurationControllerCreateData = {
  body: CreateConfigurationDto
  path?: never
  query?: never
  url: '/configurations'
}

export type ConfigurationControllerCreateErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type ConfigurationControllerCreateError =
  ConfigurationControllerCreateErrors[keyof ConfigurationControllerCreateErrors]

export type ConfigurationControllerCreateResponses = {
  201: ResponseIdDto
}

export type ConfigurationControllerCreateResponse =
  ConfigurationControllerCreateResponses[keyof ConfigurationControllerCreateResponses]

export type ConfigurationControllerDeleteData = {
  body?: never
  path: {
    id: string
  }
  query?: never
  url: '/configurations/{id}'
}

export type ConfigurationControllerDeleteErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type ConfigurationControllerDeleteError =
  ConfigurationControllerDeleteErrors[keyof ConfigurationControllerDeleteErrors]

export type ConfigurationControllerDeleteResponses = {
  200: ResponseIdDto
  201: ResponseIdDto
}

export type ConfigurationControllerDeleteResponse =
  ConfigurationControllerDeleteResponses[keyof ConfigurationControllerDeleteResponses]

export type ConfigurationControllerFindOneData = {
  body?: never
  path: {
    id: string
  }
  query?: never
  url: '/configurations/{id}'
}

export type ConfigurationControllerFindOneErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type ConfigurationControllerFindOneError =
  ConfigurationControllerFindOneErrors[keyof ConfigurationControllerFindOneErrors]

export type ConfigurationControllerFindOneResponses = {
  200: ConfigurationDtoReadable
}

export type ConfigurationControllerFindOneResponse =
  ConfigurationControllerFindOneResponses[keyof ConfigurationControllerFindOneResponses]

export type ConfigurationControllerUpdateData = {
  body: UpdateConfigurationDto
  path: {
    id: string
  }
  query?: never
  url: '/configurations/{id}'
}

export type ConfigurationControllerUpdateErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type ConfigurationControllerUpdateError =
  ConfigurationControllerUpdateErrors[keyof ConfigurationControllerUpdateErrors]

export type ConfigurationControllerUpdateResponses = {
  200: ResponseIdDto
}

export type ConfigurationControllerUpdateResponse =
  ConfigurationControllerUpdateResponses[keyof ConfigurationControllerUpdateResponses]

export type AccountsControllerRemoveData = {
  body: AccountDto
  path?: never
  query?: never
  url: '/users/accounts'
}

export type AccountsControllerRemoveErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type AccountsControllerRemoveError =
  AccountsControllerRemoveErrors[keyof AccountsControllerRemoveErrors]

export type AccountsControllerRemoveResponses = {
  200: OkDto
}

export type AccountsControllerRemoveResponse =
  AccountsControllerRemoveResponses[keyof AccountsControllerRemoveResponses]

export type AccountsControllerFindData = {
  body?: never
  path?: never
  query: {
    provider: string
    identity: string
    isVerified: boolean
  }
  url: '/users/accounts'
}

export type AccountsControllerFindErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type AccountsControllerFindError =
  AccountsControllerFindErrors[keyof AccountsControllerFindErrors]

export type AccountsControllerFindResponses = {
  200: Array<AccountDto>
}

export type AccountsControllerFindResponse =
  AccountsControllerFindResponses[keyof AccountsControllerFindResponses]

export type AccountsControllerUpdateData = {
  body: AccountDto
  path?: never
  query?: never
  url: '/users/accounts'
}

export type AccountsControllerUpdateErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type AccountsControllerUpdateError =
  AccountsControllerUpdateErrors[keyof AccountsControllerUpdateErrors]

export type AccountsControllerUpdateResponses = {
  200: OkDto
}

export type AccountsControllerUpdateResponse =
  AccountsControllerUpdateResponses[keyof AccountsControllerUpdateResponses]

export type AccountsControllerAddData = {
  body: AddAccountDto
  path?: never
  query?: never
  url: '/users/accounts'
}

export type AccountsControllerAddErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type AccountsControllerAddError =
  AccountsControllerAddErrors[keyof AccountsControllerAddErrors]

export type AccountsControllerAddResponses = {
  201: AccountDto
}

export type AccountsControllerAddResponse =
  AccountsControllerAddResponses[keyof AccountsControllerAddResponses]

export type AccountsControllerSetPrimaryData = {
  body: AccountDto
  path?: never
  query?: never
  url: '/users/accounts/set-primary'
}

export type AccountsControllerSetPrimaryErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type AccountsControllerSetPrimaryError =
  AccountsControllerSetPrimaryErrors[keyof AccountsControllerSetPrimaryErrors]

export type AccountsControllerSetPrimaryResponses = {
  200: Array<AccountDto>
}

export type AccountsControllerSetPrimaryResponse =
  AccountsControllerSetPrimaryResponses[keyof AccountsControllerSetPrimaryResponses]

export type UsersControllerAddFirstBalanceData = {
  body?: never
  path?: never
  query?: never
  url: '/users/first-balance'
}

export type UsersControllerAddFirstBalanceErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type UsersControllerAddFirstBalanceError =
  UsersControllerAddFirstBalanceErrors[keyof UsersControllerAddFirstBalanceErrors]

export type UsersControllerAddFirstBalanceResponses = {
  200: ResponseStatusDto
  201: ResponseStatusDto
}

export type UsersControllerAddFirstBalanceResponse =
  UsersControllerAddFirstBalanceResponses[keyof UsersControllerAddFirstBalanceResponses]

export type UsersControllerFindAllData = {
  body?: never
  path?: never
  query?: {
    page?: number
    limit?: number
    search?: string
    status?: string
    role?: string
    type?: string
    roles?: Array<
      | 'client'
      | 'api'
      | 'guest'
      | 'newbie'
      | 'needverify'
      | 'emailless'
      | 'phoneless'
      | 'passwordless'
      | 'user'
      | 'editor'
      | 'manager'
      | 'admin'
      | 'god'
      | 'chat'
    >
  }
  url: '/users'
}

export type UsersControllerFindAllErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type UsersControllerFindAllError =
  UsersControllerFindAllErrors[keyof UsersControllerFindAllErrors]

export type UsersControllerFindAllResponses = {
  /**
   * Successfully received model list
   */
  200: PaginatedDto & {
    list?: Array<UserDtoReadable>
    meta?: PaginatedMetaDto
    parent?: unknown
  }
}

export type UsersControllerFindAllResponse =
  UsersControllerFindAllResponses[keyof UsersControllerFindAllResponses]

export type UsersControllerCreateData = {
  body: CreateUserDto
  path?: never
  query?: never
  url: '/users'
}

export type UsersControllerCreateErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type UsersControllerCreateError =
  UsersControllerCreateErrors[keyof UsersControllerCreateErrors]

export type UsersControllerCreateResponses = {
  201: ResponseIdDto
}

export type UsersControllerCreateResponse =
  UsersControllerCreateResponses[keyof UsersControllerCreateResponses]

export type UsersControllerDeleteData = {
  body?: never
  path: {
    id: string
  }
  query?: never
  url: '/users/{id}'
}

export type UsersControllerDeleteErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type UsersControllerDeleteError =
  UsersControllerDeleteErrors[keyof UsersControllerDeleteErrors]

export type UsersControllerDeleteResponses = {
  200: ResponseIdDto
  201: ResponseIdDto
}

export type UsersControllerDeleteResponse =
  UsersControllerDeleteResponses[keyof UsersControllerDeleteResponses]

export type UsersControllerFindOneData = {
  body?: never
  path: {
    id: string
  }
  query?: never
  url: '/users/{id}'
}

export type UsersControllerFindOneErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type UsersControllerFindOneError =
  UsersControllerFindOneErrors[keyof UsersControllerFindOneErrors]

export type UsersControllerFindOneResponses = {
  200: UserDtoReadable
}

export type UsersControllerFindOneResponse =
  UsersControllerFindOneResponses[keyof UsersControllerFindOneResponses]

export type UsersControllerUpdateData = {
  body: UpdateUserDto
  path: {
    id: string
  }
  query?: never
  url: '/users/{id}'
}

export type UsersControllerUpdateErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type UsersControllerUpdateError =
  UsersControllerUpdateErrors[keyof UsersControllerUpdateErrors]

export type UsersControllerUpdateResponses = {
  200: ResponseIdDto
}

export type UsersControllerUpdateResponse =
  UsersControllerUpdateResponses[keyof UsersControllerUpdateResponses]

export type UsersControllerChangeUserRoleData = {
  body: UpdateRolesDto
  path: {
    id: string
  }
  query?: never
  url: '/users/change-role/{id}'
}

export type UsersControllerChangeUserRoleErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type UsersControllerChangeUserRoleError =
  UsersControllerChangeUserRoleErrors[keyof UsersControllerChangeUserRoleErrors]

export type UsersControllerChangeUserRoleResponses = {
  /**
   *  RoleEnum updated successfully.
   */
  200: OkDto
}

export type UsersControllerChangeUserRoleResponse =
  UsersControllerChangeUserRoleResponses[keyof UsersControllerChangeUserRoleResponses]

export type UsersControllerChangePasswordData = {
  body: UpdatePasswordDto
  path: {
    id: string
  }
  query?: never
  url: '/users/{id}/change-password'
}

export type UsersControllerChangePasswordErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type UsersControllerChangePasswordError =
  UsersControllerChangePasswordErrors[keyof UsersControllerChangePasswordErrors]

export type UsersControllerChangePasswordResponses = {
  /**
   * Password updated successfully.
   */
  200: OkDto
}

export type UsersControllerChangePasswordResponse =
  UsersControllerChangePasswordResponses[keyof UsersControllerChangePasswordResponses]

export type ProfileControllerGetUserAvatarData = {
  body?: never
  path?: never
  query?: never
  url: '/profile/avatar'
}

export type ProfileControllerGetUserAvatarResponses = {
  /**
   *  Avatar image
   */
  200: AvatarDto
}

export type ProfileControllerGetUserAvatarResponse =
  ProfileControllerGetUserAvatarResponses[keyof ProfileControllerGetUserAvatarResponses]

export type ProfileControllerUploadUserAvatarData = {
  body: {
    /**
     * The file to upload
     */
    file?: Blob | File
  }
  path?: never
  query?: never
  url: '/profile/avatar'
}

export type ProfileControllerUploadUserAvatarResponses = {
  201: ResponseStatusDto
}

export type ProfileControllerUploadUserAvatarResponse =
  ProfileControllerUploadUserAvatarResponses[keyof ProfileControllerUploadUserAvatarResponses]

export type ProfileControllerFindPublicOneData = {
  body?: never
  path: {
    username: string
  }
  query?: never
  url: '/profile/public/{username}'
}

export type ProfileControllerFindPublicOneResponses = {
  200: ProfilePublicDtoReadable
}

export type ProfileControllerFindPublicOneResponse =
  ProfileControllerFindPublicOneResponses[keyof ProfileControllerFindPublicOneResponses]

export type ProfileControllerGetUserDetailsWithAdminData = {
  body?: never
  path: {
    id: string
  }
  query?: never
  url: '/profile/{id}/admin'
}

export type ProfileControllerGetUserDetailsWithAdminResponses = {
  /**
   *  object of user information.
   */
  200: ProfileDtoReadable
}

export type ProfileControllerGetUserDetailsWithAdminResponse =
  ProfileControllerGetUserDetailsWithAdminResponses[keyof ProfileControllerGetUserDetailsWithAdminResponses]

export type ProfileControllerSearchData = {
  body?: never
  path?: never
  query?: {
    page?: number
    limit?: number
    search?: string
    status?: string
    role?: string
    type?: string
    roles?: Array<
      | 'client'
      | 'api'
      | 'guest'
      | 'newbie'
      | 'needverify'
      | 'emailless'
      | 'phoneless'
      | 'passwordless'
      | 'user'
      | 'editor'
      | 'manager'
      | 'admin'
      | 'god'
      | 'chat'
    >
  }
  url: '/profile/search'
}

export type ProfileControllerSearchResponses = {
  /**
   * Successfully received model list
   */
  200: PaginatedDto & {
    list?: Array<ProfileInfoDtoReadable>
    meta?: PaginatedMetaDto
    parent?: unknown
  }
}

export type ProfileControllerSearchResponse =
  ProfileControllerSearchResponses[keyof ProfileControllerSearchResponses]

export type ProfileControllerFindAllData = {
  body?: never
  path?: never
  query?: {
    page?: number
    limit?: number
    search?: string
    status?: string
    role?: string
    type?: string
    roles?: Array<
      | 'client'
      | 'api'
      | 'guest'
      | 'newbie'
      | 'needverify'
      | 'emailless'
      | 'phoneless'
      | 'passwordless'
      | 'user'
      | 'editor'
      | 'manager'
      | 'admin'
      | 'god'
      | 'chat'
    >
  }
  url: '/profile'
}

export type ProfileControllerFindAllResponses = {
  /**
   * Successfully received model list
   */
  200: PaginatedDto & {
    list?: Array<ProfileDtoReadable>
    meta?: PaginatedMetaDto
    parent?: unknown
  }
}

export type ProfileControllerFindAllResponse =
  ProfileControllerFindAllResponses[keyof ProfileControllerFindAllResponses]

export type ProfileControllerFindOneData = {
  body?: never
  path: {
    id: string
  }
  query?: never
  url: '/profile/{id}'
}

export type ProfileControllerFindOneResponses = {
  200: ProfileDtoReadable
}

export type ProfileControllerFindOneResponse =
  ProfileControllerFindOneResponses[keyof ProfileControllerFindOneResponses]

export type FileControllerUploadData = {
  body: {
    /**
     * The file to upload
     */
    file?: Blob | File
  }
  path?: never
  query?: never
  url: '/file/upload'
}

export type FileControllerUploadResponses = {
  /**
   * File uploaded!
   */
  201: FileDto
}

export type FileControllerUploadResponse =
  FileControllerUploadResponses[keyof FileControllerUploadResponses]

export type NotesControllerGetTagCloudData = {
  body?: never
  path: {
    domain: string
  }
  query?: never
  url: '/notes/tag-cloud/{domain}'
}

export type NotesControllerGetTagCloudErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type NotesControllerGetTagCloudError =
  NotesControllerGetTagCloudErrors[keyof NotesControllerGetTagCloudErrors]

export type NotesControllerGetTagCloudResponses = {
  200: Array<TagCloudDto>
}

export type NotesControllerGetTagCloudResponse =
  NotesControllerGetTagCloudResponses[keyof NotesControllerGetTagCloudResponses]

export type NotesControllerGetTagCloudByCategoryData = {
  body?: never
  path: {
    category: string
    domain: string
  }
  query?: never
  url: '/notes/tag-cloud/{category}/{domain}'
}

export type NotesControllerGetTagCloudByCategoryErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type NotesControllerGetTagCloudByCategoryError =
  NotesControllerGetTagCloudByCategoryErrors[keyof NotesControllerGetTagCloudByCategoryErrors]

export type NotesControllerGetTagCloudByCategoryResponses = {
  200: Array<TagCloudDto>
}

export type NotesControllerGetTagCloudByCategoryResponse =
  NotesControllerGetTagCloudByCategoryResponses[keyof NotesControllerGetTagCloudByCategoryResponses]

export type NotesControllerFindOneBySlugData = {
  body?: never
  path: {
    slug: string
    domain: string
  }
  query?: never
  url: '/notes/by-slug/{slug}/{domain}'
}

export type NotesControllerFindOneBySlugErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type NotesControllerFindOneBySlugError =
  NotesControllerFindOneBySlugErrors[keyof NotesControllerFindOneBySlugErrors]

export type NotesControllerFindOneBySlugResponses = {
  200: NoteDtoReadable
}

export type NotesControllerFindOneBySlugResponse =
  NotesControllerFindOneBySlugResponses[keyof NotesControllerFindOneBySlugResponses]

export type NotesControllerGetDraftData = {
  body?: never
  path?: never
  query?: never
  url: '/notes/draft'
}

export type NotesControllerGetDraftErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type NotesControllerGetDraftError =
  NotesControllerGetDraftErrors[keyof NotesControllerGetDraftErrors]

export type NotesControllerGetDraftResponses = {
  200: NoteDtoReadable
}

export type NotesControllerGetDraftResponse =
  NotesControllerGetDraftResponses[keyof NotesControllerGetDraftResponses]

export type NotesControllerFileUploadData = {
  body: {
    file?: Blob | File
    exif?: {
      [key: string]: string
    }
  }
  path: {
    note: string
  }
  query?: never
  url: '/notes/{note}/files'
}

export type NotesControllerFileUploadErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type NotesControllerFileUploadError =
  NotesControllerFileUploadErrors[keyof NotesControllerFileUploadErrors]

export type NotesControllerFileUploadResponses = {
  200: ResponseStatusDto
  201: ResponseStatusDto
}

export type NotesControllerFileUploadResponse =
  NotesControllerFileUploadResponses[keyof NotesControllerFileUploadResponses]

export type NotesControllerFileUpdateData = {
  body: UpdateNoteFileDto
  path: {
    note: string
    id: string
  }
  query?: never
  url: '/notes/{note}/files/{id}'
}

export type NotesControllerFileUpdateErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type NotesControllerFileUpdateError =
  NotesControllerFileUpdateErrors[keyof NotesControllerFileUpdateErrors]

export type NotesControllerFileUpdateResponses = {
  200: ResponseIdDto
}

export type NotesControllerFileUpdateResponse =
  NotesControllerFileUpdateResponses[keyof NotesControllerFileUpdateResponses]

export type NotesControllerFindAllByCategoryData = {
  body?: never
  path: {
    category: string
    domain: string
  }
  query?: {
    page?: number
    limit?: number
    search?: string
    status?: string
    role?: string
    type?: string
    roles?: Array<
      | 'client'
      | 'api'
      | 'guest'
      | 'newbie'
      | 'needverify'
      | 'emailless'
      | 'phoneless'
      | 'passwordless'
      | 'user'
      | 'editor'
      | 'manager'
      | 'admin'
      | 'god'
      | 'chat'
    >
  }
  url: '/notes/by-category/{category}/{domain}'
}

export type NotesControllerFindAllByCategoryErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type NotesControllerFindAllByCategoryError =
  NotesControllerFindAllByCategoryErrors[keyof NotesControllerFindAllByCategoryErrors]

export type NotesControllerFindAllByCategoryResponses = {
  /**
   * Successfully received model list
   */
  200: PaginatedDto & {
    list?: Array<NoteDtoReadable>
    meta?: PaginatedMetaDto
    parent?: unknown
  }
}

export type NotesControllerFindAllByCategoryResponse =
  NotesControllerFindAllByCategoryResponses[keyof NotesControllerFindAllByCategoryResponses]

export type NotesControllerFindAllByTagData = {
  body?: never
  path: {
    tag: string
    domain: string
  }
  query?: {
    page?: number
    limit?: number
    search?: string
    status?: string
    role?: string
    type?: string
    roles?: Array<
      | 'client'
      | 'api'
      | 'guest'
      | 'newbie'
      | 'needverify'
      | 'emailless'
      | 'phoneless'
      | 'passwordless'
      | 'user'
      | 'editor'
      | 'manager'
      | 'admin'
      | 'god'
      | 'chat'
    >
  }
  url: '/notes/by-tag/{tag}/{domain}'
}

export type NotesControllerFindAllByTagErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type NotesControllerFindAllByTagError =
  NotesControllerFindAllByTagErrors[keyof NotesControllerFindAllByTagErrors]

export type NotesControllerFindAllByTagResponses = {
  /**
   * Successfully received model list
   */
  200: PaginatedDto & {
    list?: Array<NoteDtoReadable>
    meta?: PaginatedMetaDto
    parent?: unknown
  }
}

export type NotesControllerFindAllByTagResponse =
  NotesControllerFindAllByTagResponses[keyof NotesControllerFindAllByTagResponses]

export type NotesControllerFindAllByTagsData = {
  body?: never
  path: {
    tags: string
    domain: string
  }
  query?: {
    page?: number
    limit?: number
    search?: string
    status?: string
    role?: string
    type?: string
    roles?: Array<
      | 'client'
      | 'api'
      | 'guest'
      | 'newbie'
      | 'needverify'
      | 'emailless'
      | 'phoneless'
      | 'passwordless'
      | 'user'
      | 'editor'
      | 'manager'
      | 'admin'
      | 'god'
      | 'chat'
    >
  }
  url: '/notes/by-tags/{tags}/{domain}'
}

export type NotesControllerFindAllByTagsErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type NotesControllerFindAllByTagsError =
  NotesControllerFindAllByTagsErrors[keyof NotesControllerFindAllByTagsErrors]

export type NotesControllerFindAllByTagsResponses = {
  /**
   * Successfully received model list
   */
  200: PaginatedDto & {
    list?: Array<NoteDtoReadable>
    meta?: PaginatedMetaDto
    parent?: unknown
  }
}

export type NotesControllerFindAllByTagsResponse =
  NotesControllerFindAllByTagsResponses[keyof NotesControllerFindAllByTagsResponses]

export type NotesControllerFindAllByDomainData = {
  body?: never
  path: {
    domain: string
  }
  query?: {
    page?: number
    limit?: number
    search?: string
    status?: string
    role?: string
    type?: string
    roles?: Array<
      | 'client'
      | 'api'
      | 'guest'
      | 'newbie'
      | 'needverify'
      | 'emailless'
      | 'phoneless'
      | 'passwordless'
      | 'user'
      | 'editor'
      | 'manager'
      | 'admin'
      | 'god'
      | 'chat'
    >
  }
  url: '/notes/by-domain/{domain}'
}

export type NotesControllerFindAllByDomainErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type NotesControllerFindAllByDomainError =
  NotesControllerFindAllByDomainErrors[keyof NotesControllerFindAllByDomainErrors]

export type NotesControllerFindAllByDomainResponses = {
  /**
   * Successfully received model list
   */
  200: PaginatedDto & {
    list?: Array<NoteDtoReadable>
    meta?: PaginatedMetaDto
    parent?: unknown
  }
}

export type NotesControllerFindAllByDomainResponse =
  NotesControllerFindAllByDomainResponses[keyof NotesControllerFindAllByDomainResponses]

export type NotesControllerFindAllData = {
  body?: never
  path?: never
  query?: {
    /**
     * Page number
     */
    page?: number
    /**
     * Number of items per page
     */
    limit?: number
    /**
     * Sort order direction
     */
    sortOrder?: 'asc' | 'desc'
    /**
     * Field to sort by
     */
    sortBy?: string
    search?: string
    /**
     * Filter criteria for the note
     */
    filters?: {
      [key: string]: unknown
    }
  }
  url: '/notes'
}

export type NotesControllerFindAllErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type NotesControllerFindAllError =
  NotesControllerFindAllErrors[keyof NotesControllerFindAllErrors]

export type NotesControllerFindAllResponses = {
  /**
   * Successfully received model list
   */
  200: PaginatedDto & {
    list?: Array<NoteDtoReadable>
    meta?: PaginatedMetaDto
    parent?: unknown
  }
}

export type NotesControllerFindAllResponse =
  NotesControllerFindAllResponses[keyof NotesControllerFindAllResponses]

export type NotesControllerCreateData = {
  body: CreateNoteDto
  path?: never
  query?: never
  url: '/notes'
}

export type NotesControllerCreateErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type NotesControllerCreateError =
  NotesControllerCreateErrors[keyof NotesControllerCreateErrors]

export type NotesControllerCreateResponses = {
  201: ResponseIdDto
}

export type NotesControllerCreateResponse =
  NotesControllerCreateResponses[keyof NotesControllerCreateResponses]

export type NotesControllerUpsertData = {
  body: UpsertNoteDtoWritable
  path?: never
  query?: never
  url: '/notes'
}

export type NotesControllerUpsertErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type NotesControllerUpsertError =
  NotesControllerUpsertErrors[keyof NotesControllerUpsertErrors]

export type NotesControllerUpsertResponses = {
  200: ResponseIdDto
}

export type NotesControllerUpsertResponse =
  NotesControllerUpsertResponses[keyof NotesControllerUpsertResponses]

export type NotesControllerDeleteData = {
  body?: never
  path: {
    id: string
  }
  query?: never
  url: '/notes/{id}'
}

export type NotesControllerDeleteErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type NotesControllerDeleteError =
  NotesControllerDeleteErrors[keyof NotesControllerDeleteErrors]

export type NotesControllerDeleteResponses = {
  200: ResponseIdDto
  201: ResponseIdDto
}

export type NotesControllerDeleteResponse =
  NotesControllerDeleteResponses[keyof NotesControllerDeleteResponses]

export type NotesControllerFindOneData = {
  body?: never
  path: {
    id: string
  }
  query?: never
  url: '/notes/{id}'
}

export type NotesControllerFindOneErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type NotesControllerFindOneError =
  NotesControllerFindOneErrors[keyof NotesControllerFindOneErrors]

export type NotesControllerFindOneResponses = {
  200: NoteDtoReadable
}

export type NotesControllerFindOneResponse =
  NotesControllerFindOneResponses[keyof NotesControllerFindOneResponses]

export type NotesControllerUpdateData = {
  body: UpdateNoteDtoWritable
  path: {
    id: string
  }
  query?: never
  url: '/notes/{id}'
}

export type NotesControllerUpdateErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type NotesControllerUpdateError =
  NotesControllerUpdateErrors[keyof NotesControllerUpdateErrors]

export type NotesControllerUpdateResponses = {
  200: ResponseIdDto
}

export type NotesControllerUpdateResponse =
  NotesControllerUpdateResponses[keyof NotesControllerUpdateResponses]

export type GptControllerSearchData = {
  body?: never
  path?: never
  query: {
    q: string
  }
  url: '/gpt'
}

export type GptControllerSearchErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type GptControllerSearchError =
  GptControllerSearchErrors[keyof GptControllerSearchErrors]

export type GptControllerSearchResponses = {
  200: Array<NoteDtoReadable>
}

export type GptControllerSearchResponse =
  GptControllerSearchResponses[keyof GptControllerSearchResponses]

export type GptControllerGptCreateNoteData = {
  body: CreateNoteDto
  path?: never
  query?: never
  url: '/gpt'
}

export type GptControllerGptCreateNoteErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type GptControllerGptCreateNoteError =
  GptControllerGptCreateNoteErrors[keyof GptControllerGptCreateNoteErrors]

export type GptControllerGptCreateNoteResponses = {
  201: ResponseIdDto
}

export type GptControllerGptCreateNoteResponse =
  GptControllerGptCreateNoteResponses[keyof GptControllerGptCreateNoteResponses]

export type GptControllerFindOneData = {
  body?: never
  path: {
    id: string
  }
  query?: never
  url: '/gpt/{id}'
}

export type GptControllerFindOneErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type GptControllerFindOneError =
  GptControllerFindOneErrors[keyof GptControllerFindOneErrors]

export type GptControllerFindOneResponses = {
  200: NoteDtoReadable
}

export type GptControllerFindOneResponse =
  GptControllerFindOneResponses[keyof GptControllerFindOneResponses]

export type GptControllerUpdateData = {
  body: UpdateNoteDtoWritable
  path: {
    id: string
  }
  query?: never
  url: '/gpt/{id}'
}

export type GptControllerUpdateErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type GptControllerUpdateError =
  GptControllerUpdateErrors[keyof GptControllerUpdateErrors]

export type GptControllerUpdateResponses = {
  200: ResponseIdDto
}

export type GptControllerUpdateResponse =
  GptControllerUpdateResponses[keyof GptControllerUpdateResponses]

export type GptControllerUploadOpenAiFilesData = {
  body: OpenAiFileUploadDto
  path: {
    id: string
  }
  query?: never
  url: '/gpt/{id}/files'
}

export type GptControllerUploadOpenAiFilesErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type GptControllerUploadOpenAiFilesError =
  GptControllerUploadOpenAiFilesErrors[keyof GptControllerUploadOpenAiFilesErrors]

export type GptControllerUploadOpenAiFilesResponses = {
  200: ResponseStatusDto
  201: ResponseStatusDto
}

export type GptControllerUploadOpenAiFilesResponse =
  GptControllerUploadOpenAiFilesResponses[keyof GptControllerUploadOpenAiFilesResponses]

export type GptControllerFileUpdateData = {
  body: UpdateNoteFileDto
  path: {
    id: string
  }
  query?: never
  url: '/gpt/{id}/files/{fileId}'
}

export type GptControllerFileUpdateErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type GptControllerFileUpdateError =
  GptControllerFileUpdateErrors[keyof GptControllerFileUpdateErrors]

export type GptControllerFileUpdateResponses = {
  200: ResponseIdDto
}

export type GptControllerFileUpdateResponse =
  GptControllerFileUpdateResponses[keyof GptControllerFileUpdateResponses]

export type SeoControllerAnalyseData = {
  body: CreateSeoReportDto
  path?: never
  query?: never
  url: '/seo/analyse'
}

export type SeoControllerAnalyseErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type SeoControllerAnalyseError =
  SeoControllerAnalyseErrors[keyof SeoControllerAnalyseErrors]

export type SeoControllerAnalyseResponses = {
  200: ResponseIdDto
  201: ResponseIdDto
}

export type SeoControllerAnalyseResponse =
  SeoControllerAnalyseResponses[keyof SeoControllerAnalyseResponses]

export type SeoControllerGetData = {
  body?: never
  path: {
    id: string
  }
  query?: never
  url: '/seo/reports/{id}'
}

export type SeoControllerGetErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type SeoControllerGetError =
  SeoControllerGetErrors[keyof SeoControllerGetErrors]

export type SeoControllerGetResponses = {
  200: SeoReportDtoReadable
}

export type SeoControllerGetResponse =
  SeoControllerGetResponses[keyof SeoControllerGetResponses]

export type SeoControllerForceData = {
  body?: never
  path: {
    id: string
  }
  query?: never
  url: '/seo/force/{id}'
}

export type SeoControllerForceErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type SeoControllerForceError =
  SeoControllerForceErrors[keyof SeoControllerForceErrors]

export type SeoControllerForceResponses = {
  200: ResponseIdDto
}

export type SeoControllerForceResponse =
  SeoControllerForceResponses[keyof SeoControllerForceResponses]

export type SeoControllerGetWorkspaceData = {
  body?: never
  path?: never
  query?: never
  url: '/seo/workspace'
}

export type SeoControllerGetWorkspaceErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type SeoControllerGetWorkspaceError =
  SeoControllerGetWorkspaceErrors[keyof SeoControllerGetWorkspaceErrors]

export type SeoControllerGetWorkspaceResponses = {
  200: SeoWorkspaceDtoReadable
}

export type SeoControllerGetWorkspaceResponse =
  SeoControllerGetWorkspaceResponses[keyof SeoControllerGetWorkspaceResponses]

export type SeoControllerGetPageDataData = {
  body?: never
  path: {
    id: string
  }
  query?: never
  url: '/seo/page/{id}'
}

export type SeoControllerGetPageDataErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type SeoControllerGetPageDataError =
  SeoControllerGetPageDataErrors[keyof SeoControllerGetPageDataErrors]

export type SeoControllerGetPageDataResponses = {
  200: SeoPageDtoReadable
}

export type SeoControllerGetPageDataResponse =
  SeoControllerGetPageDataResponses[keyof SeoControllerGetPageDataResponses]

export type SeoControllerGetPageTermDataData = {
  body?: never
  path: {
    id: string
  }
  query?: never
  url: '/seo/page-term/{id}'
}

export type SeoControllerGetPageTermDataErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type SeoControllerGetPageTermDataError =
  SeoControllerGetPageTermDataErrors[keyof SeoControllerGetPageTermDataErrors]

export type SeoControllerGetPageTermDataResponses = {
  200: SeoPageTermDtoReadable
}

export type SeoControllerGetPageTermDataResponse =
  SeoControllerGetPageTermDataResponses[keyof SeoControllerGetPageTermDataResponses]

export type PttControllerPttData = {
  body?: never
  path: {
    id: string
  }
  query?: never
  url: '/ptt/{id}/ptt'
}

export type PttControllerPttErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type PttControllerPttError =
  PttControllerPttErrors[keyof PttControllerPttErrors]

export type PttControllerPttResponses = {
  200: ResponseIdDto
}

export type PttControllerPttResponse =
  PttControllerPttResponses[keyof PttControllerPttResponses]

export type PttControllerGetBarcodeData = {
  body?: never
  path: {
    project: string
  }
  query?: never
  url: '/ptt/{project}/barcode'
}

export type PttControllerGetBarcodeErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type PttControllerGetBarcodeError =
  PttControllerGetBarcodeErrors[keyof PttControllerGetBarcodeErrors]

export type PttControllerGetBarcodeResponses = {
  200: BarcodeDtoReadable
}

export type PttControllerGetBarcodeResponse =
  PttControllerGetBarcodeResponses[keyof PttControllerGetBarcodeResponses]

export type PttControllerFindAllData = {
  body?: never
  path?: never
  query?: {
    page?: number
    limit?: number
    search?: string
    status?: string
    role?: string
    type?: string
    /**
     * The unique id
     */
    project?: string
    roles?: Array<
      | 'client'
      | 'api'
      | 'guest'
      | 'newbie'
      | 'needverify'
      | 'emailless'
      | 'phoneless'
      | 'passwordless'
      | 'user'
      | 'editor'
      | 'manager'
      | 'admin'
      | 'god'
      | 'chat'
    >
  }
  url: '/ptt'
}

export type PttControllerFindAllErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type PttControllerFindAllError =
  PttControllerFindAllErrors[keyof PttControllerFindAllErrors]

export type PttControllerFindAllResponses = {
  /**
   * Successfully received model list
   */
  200: PaginatedDto & {
    list?: Array<PttDtoReadable>
    meta?: PaginatedMetaDto
    parent?: unknown
  }
}

export type PttControllerFindAllResponse =
  PttControllerFindAllResponses[keyof PttControllerFindAllResponses]

export type PttControllerCreateData = {
  body: CreatePttDto
  path?: never
  query?: never
  url: '/ptt'
}

export type PttControllerCreateErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type PttControllerCreateError =
  PttControllerCreateErrors[keyof PttControllerCreateErrors]

export type PttControllerCreateResponses = {
  201: ResponseIdDto
}

export type PttControllerCreateResponse =
  PttControllerCreateResponses[keyof PttControllerCreateResponses]

export type PttControllerDeleteData = {
  body?: never
  path: {
    id: string
  }
  query?: never
  url: '/ptt/{id}'
}

export type PttControllerDeleteErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type PttControllerDeleteError =
  PttControllerDeleteErrors[keyof PttControllerDeleteErrors]

export type PttControllerDeleteResponses = {
  200: ResponseIdDto
  201: ResponseIdDto
}

export type PttControllerDeleteResponse =
  PttControllerDeleteResponses[keyof PttControllerDeleteResponses]

export type PttControllerFindOneData = {
  body?: never
  path: {
    id: string
  }
  query?: never
  url: '/ptt/{id}'
}

export type PttControllerFindOneErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type PttControllerFindOneError =
  PttControllerFindOneErrors[keyof PttControllerFindOneErrors]

export type PttControllerFindOneResponses = {
  200: PttDtoReadable
}

export type PttControllerFindOneResponse =
  PttControllerFindOneResponses[keyof PttControllerFindOneResponses]

export type PttControllerUpdateData = {
  body: UpdatePttDto
  path: {
    id: string
  }
  query?: never
  url: '/ptt/{id}'
}

export type PttControllerUpdateErrors = {
  /**
   * Bad Request Exception
   */
  400: ErrorDto
  /**
   * Unauthorized
   */
  401: ErrorDto
  /**
   * Forbidden
   */
  403: ErrorDto
  /**
   * Not Found
   */
  404: ErrorDto
  /**
   * Conflict
   */
  409: ErrorDto
  /**
   * Validation Error
   */
  422: ErrorDto
  /**
   * Internal Server Error
   */
  500: ErrorDto
}

export type PttControllerUpdateError =
  PttControllerUpdateErrors[keyof PttControllerUpdateErrors]

export type PttControllerUpdateResponses = {
  200: ResponseIdDto
}

export type PttControllerUpdateResponse =
  PttControllerUpdateResponses[keyof PttControllerUpdateResponses]

export type ClientOptions = {
  baseUrl: 'http://localhost:3366' | (string & {})
}
