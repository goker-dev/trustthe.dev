// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options as ClientOptions,
  type TDataShape,
  type Client,
  formDataBodySerializer,
} from '@hey-api/client-fetch'
import type {
  HealthControllerCheckData,
  HealthControllerCheckResponse,
  HealthControllerCheckError,
  ProjectsControllerFindAllData,
  ProjectsControllerFindAllResponse,
  ProjectsControllerFindAllError,
  ProjectsControllerCreateData,
  ProjectsControllerCreateResponse,
  ProjectsControllerCreateError,
  ProjectsControllerRemoveData,
  ProjectsControllerRemoveResponse,
  ProjectsControllerRemoveError,
  ProjectsControllerFindOneData,
  ProjectsControllerFindOneResponse,
  ProjectsControllerFindOneError,
  ProjectsControllerUpdateData,
  ProjectsControllerUpdateResponse,
  ProjectsControllerUpdateError,
  ProjectsControllerGenerateNewApiKeyData,
  ProjectsControllerGenerateNewApiKeyResponse,
  ProjectsControllerGenerateNewApiKeyError,
  CreditControllerAddFirstBalanceData,
  CreditControllerAddFirstBalanceResponse,
  CreditControllerAddFirstBalanceError,
  CreditControllerBalanceData,
  CreditControllerBalanceResponse,
  CreditControllerBalanceError,
  CreditControllerTransactionsData,
  CreditControllerTransactionsResponse,
  CreditControllerTransactionsError,
  ApplicationsControllerNewTokenData,
  ApplicationsControllerNewTokenResponse,
  ApplicationsControllerNewTokenError,
  ApplicationsControllerChatTokenData,
  ApplicationsControllerChatTokenResponse,
  ApplicationsControllerChatTokenError,
  ApplicationsControllerFindAllData,
  ApplicationsControllerFindAllResponse,
  ApplicationsControllerFindAllError,
  ApplicationsControllerCreateData,
  ApplicationsControllerCreateResponse,
  ApplicationsControllerCreateError,
  ApplicationsControllerDeleteData,
  ApplicationsControllerDeleteResponse,
  ApplicationsControllerDeleteError,
  ApplicationsControllerFindOneData,
  ApplicationsControllerFindOneResponse,
  ApplicationsControllerFindOneError,
  ApplicationsControllerUpdateData,
  ApplicationsControllerUpdateResponse,
  ApplicationsControllerUpdateError,
  ProjectsApplicationsControllerFindAllByProjectIdData,
  ProjectsApplicationsControllerFindAllByProjectIdResponse,
  ProjectsApplicationsControllerFindAllByProjectIdError,
  AuthControllerRegisterData,
  AuthControllerRegisterResponse,
  AuthControllerRegisterError,
  AuthControllerLoginData,
  AuthControllerLoginResponse,
  AuthControllerLoginError,
  AuthControllerRefreshData,
  AuthControllerRefreshResponse,
  AuthControllerRefreshError,
  AuthControllerUnVerifiedAccountsData,
  AuthControllerUnVerifiedAccountsResponse,
  AuthControllerUnVerifiedAccountsError,
  AuthControllerResendVerifyData,
  AuthControllerResendVerifyResponse,
  AuthControllerResendVerifyError,
  AuthControllerVerifyData,
  AuthControllerVerifyResponse,
  AuthControllerVerifyError,
  AuthControllerRecoveryData,
  AuthControllerRecoveryResponse,
  AuthControllerRecoveryError,
  AuthControllerResetData,
  AuthControllerResetResponse,
  AuthControllerResetError,
  AuthControllerLogoutData,
  AuthControllerLogoutResponse,
  AuthControllerLogoutError,
  AuthControllerChangePasswordData,
  AuthControllerChangePasswordResponse,
  AuthControllerChangePasswordError,
  AuthControllerAccountInfoData,
  AuthControllerAccountInfoResponse,
  AuthControllerAccountInfoError,
  AuthControllerUpdateAccountInfoData,
  AuthControllerUpdateAccountInfoResponse,
  AuthControllerUpdateAccountInfoError,
  AuthControllerRoleDropData,
  AuthControllerRoleDropResponse,
  AuthControllerRoleDropError,
  AuthControllerDeactivateData,
  AuthControllerDeactivateResponse,
  AuthControllerDeactivateError,
  AuthControllerSessionsData,
  AuthControllerSessionsResponse,
  AuthControllerSessionsError,
  AuthControllerLoginActivityData,
  AuthControllerLoginActivityResponse,
  AuthControllerLoginActivityError,
  AuthControllerDropData,
  AuthControllerDropResponse,
  AuthControllerDropError,
  AuthControllerSetUsernameData,
  AuthControllerSetUsernameResponse,
  AuthControllerSetUsernameError,
  AuthControllerBanData,
  AuthControllerBanResponse,
  AuthControllerBanError,
  WalletControllerAuthenticateData,
  WalletControllerAuthenticateResponse,
  WalletControllerAuthenticateError,
  WalletControllerGetMetamaskLoginMessageData,
  WalletControllerGetMetamaskLoginMessageResponse,
  WalletControllerGetMetamaskLoginMessageError,
  WalletControllerDisconnectWalletData,
  WalletControllerDisconnectWalletResponse,
  WalletControllerDisconnectWalletError,
  WalletControllerConnectWalletData,
  WalletControllerConnectWalletResponse,
  WalletControllerConnectWalletError,
  VerificationControllerVerifyData,
  VerificationControllerVerifyResponse,
  VerificationControllerVerifyError,
  ConfigurationControllerFindAllData,
  ConfigurationControllerFindAllResponse,
  ConfigurationControllerFindAllError,
  ConfigurationControllerCreateData,
  ConfigurationControllerCreateResponse,
  ConfigurationControllerCreateError,
  ConfigurationControllerDeleteData,
  ConfigurationControllerDeleteResponse,
  ConfigurationControllerDeleteError,
  ConfigurationControllerFindOneData,
  ConfigurationControllerFindOneResponse,
  ConfigurationControllerFindOneError,
  ConfigurationControllerUpdateData,
  ConfigurationControllerUpdateResponse,
  ConfigurationControllerUpdateError,
  AccountsControllerRemoveData,
  AccountsControllerRemoveResponse,
  AccountsControllerRemoveError,
  AccountsControllerFindData,
  AccountsControllerFindResponse,
  AccountsControllerFindError,
  AccountsControllerUpdateData,
  AccountsControllerUpdateResponse,
  AccountsControllerUpdateError,
  AccountsControllerAddData,
  AccountsControllerAddResponse,
  AccountsControllerAddError,
  AccountsControllerSetPrimaryData,
  AccountsControllerSetPrimaryResponse,
  AccountsControllerSetPrimaryError,
  UsersControllerAddFirstBalanceData,
  UsersControllerAddFirstBalanceResponse,
  UsersControllerAddFirstBalanceError,
  UsersControllerFindAllData,
  UsersControllerFindAllResponse,
  UsersControllerFindAllError,
  UsersControllerCreateData,
  UsersControllerCreateResponse,
  UsersControllerCreateError,
  UsersControllerDeleteData,
  UsersControllerDeleteResponse,
  UsersControllerDeleteError,
  UsersControllerFindOneData,
  UsersControllerFindOneResponse,
  UsersControllerFindOneError,
  UsersControllerUpdateData,
  UsersControllerUpdateResponse,
  UsersControllerUpdateError,
  UsersControllerChangeUserRoleData,
  UsersControllerChangeUserRoleResponse,
  UsersControllerChangeUserRoleError,
  UsersControllerChangePasswordData,
  UsersControllerChangePasswordResponse,
  UsersControllerChangePasswordError,
  ProfileControllerGetUserAvatarData,
  ProfileControllerGetUserAvatarResponse,
  ProfileControllerUploadUserAvatarData,
  ProfileControllerUploadUserAvatarResponse,
  ProfileControllerFindPublicOneData,
  ProfileControllerFindPublicOneResponse,
  ProfileControllerGetUserDetailsWithAdminData,
  ProfileControllerGetUserDetailsWithAdminResponse,
  ProfileControllerSearchData,
  ProfileControllerSearchResponse,
  ProfileControllerFindAllData,
  ProfileControllerFindAllResponse,
  ProfileControllerFindOneData,
  ProfileControllerFindOneResponse,
  FileControllerUploadData,
  FileControllerUploadResponse,
  NotesControllerGetTagCloudData,
  NotesControllerGetTagCloudResponse,
  NotesControllerGetTagCloudError,
  NotesControllerGetTagCloudByCategoryData,
  NotesControllerGetTagCloudByCategoryResponse,
  NotesControllerGetTagCloudByCategoryError,
  NotesControllerFindOneBySlugData,
  NotesControllerFindOneBySlugResponse,
  NotesControllerFindOneBySlugError,
  NotesControllerGetDraftData,
  NotesControllerGetDraftResponse,
  NotesControllerGetDraftError,
  NotesControllerFileUploadData,
  NotesControllerFileUploadResponse,
  NotesControllerFileUploadError,
  NotesControllerFileUpdateData,
  NotesControllerFileUpdateResponse,
  NotesControllerFileUpdateError,
  NotesControllerFindAllByCategoryData,
  NotesControllerFindAllByCategoryResponse,
  NotesControllerFindAllByCategoryError,
  NotesControllerFindAllByTagData,
  NotesControllerFindAllByTagResponse,
  NotesControllerFindAllByTagError,
  NotesControllerFindAllByTagsData,
  NotesControllerFindAllByTagsResponse,
  NotesControllerFindAllByTagsError,
  NotesControllerFindAllByDomainData,
  NotesControllerFindAllByDomainResponse,
  NotesControllerFindAllByDomainError,
  NotesControllerFindAllData,
  NotesControllerFindAllResponse,
  NotesControllerFindAllError,
  NotesControllerCreateData,
  NotesControllerCreateResponse,
  NotesControllerCreateError,
  NotesControllerUpsertData,
  NotesControllerUpsertResponse,
  NotesControllerUpsertError,
  NotesControllerDeleteData,
  NotesControllerDeleteResponse,
  NotesControllerDeleteError,
  NotesControllerFindOneData,
  NotesControllerFindOneResponse,
  NotesControllerFindOneError,
  NotesControllerUpdateData,
  NotesControllerUpdateResponse,
  NotesControllerUpdateError,
  GptControllerSearchData,
  GptControllerSearchResponse,
  GptControllerSearchError,
  GptControllerGptCreateNoteData,
  GptControllerGptCreateNoteResponse,
  GptControllerGptCreateNoteError,
  GptControllerFindOneData,
  GptControllerFindOneResponse,
  GptControllerFindOneError,
  GptControllerUpdateData,
  GptControllerUpdateResponse,
  GptControllerUpdateError,
  GptControllerUploadOpenAiFilesData,
  GptControllerUploadOpenAiFilesResponse,
  GptControllerUploadOpenAiFilesError,
  GptControllerFileUpdateData,
  GptControllerFileUpdateResponse,
  GptControllerFileUpdateError,
  SeoControllerAnalyseData,
  SeoControllerAnalyseResponse,
  SeoControllerAnalyseError,
  SeoControllerGetData,
  SeoControllerGetResponse,
  SeoControllerGetError,
  SeoControllerForceData,
  SeoControllerForceResponse,
  SeoControllerForceError,
  SeoControllerGetWorkspaceData,
  SeoControllerGetWorkspaceResponse,
  SeoControllerGetWorkspaceError,
  SeoControllerGetPageDataData,
  SeoControllerGetPageDataResponse,
  SeoControllerGetPageDataError,
  SeoControllerGetPageTermDataData,
  SeoControllerGetPageTermDataResponse,
  SeoControllerGetPageTermDataError,
  PttControllerPttData,
  PttControllerPttResponse,
  PttControllerPttError,
  PttControllerGetBarcodeData,
  PttControllerGetBarcodeResponse,
  PttControllerGetBarcodeError,
  PttControllerFindAllData,
  PttControllerFindAllResponse,
  PttControllerFindAllError,
  PttControllerCreateData,
  PttControllerCreateResponse,
  PttControllerCreateError,
  PttControllerDeleteData,
  PttControllerDeleteResponse,
  PttControllerDeleteError,
  PttControllerFindOneData,
  PttControllerFindOneResponse,
  PttControllerFindOneError,
  PttControllerUpdateData,
  PttControllerUpdateResponse,
  PttControllerUpdateError,
} from './types.gen'
import { client as _heyApiClient } from './client.gen'

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>
}

export const healthControllerCheck = <ThrowOnError extends boolean = false>(
  options?: Options<HealthControllerCheckData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    HealthControllerCheckResponse,
    HealthControllerCheckError,
    ThrowOnError
  >({
    url: '/health',
    ...options,
  })
}

/**
 * List of all items
 */
export const projectsControllerFindAll = <ThrowOnError extends boolean = false>(
  options?: Options<ProjectsControllerFindAllData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ProjectsControllerFindAllResponse,
    ProjectsControllerFindAllError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/projects',
    ...options,
  })
}

/**
 * Create an item
 */
export const projectsControllerCreate = <ThrowOnError extends boolean = false>(
  options: Options<ProjectsControllerCreateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    ProjectsControllerCreateResponse,
    ProjectsControllerCreateError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/projects',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

export const projectsControllerRemove = <ThrowOnError extends boolean = false>(
  options: Options<ProjectsControllerRemoveData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    ProjectsControllerRemoveResponse,
    ProjectsControllerRemoveError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/projects/{id}',
    ...options,
  })
}

/**
 * Get a item
 */
export const projectsControllerFindOne = <ThrowOnError extends boolean = false>(
  options: Options<ProjectsControllerFindOneData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ProjectsControllerFindOneResponse,
    ProjectsControllerFindOneError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/projects/{id}',
    ...options,
  })
}

/**
 * Update an item
 */
export const projectsControllerUpdate = <ThrowOnError extends boolean = false>(
  options: Options<ProjectsControllerUpdateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    ProjectsControllerUpdateResponse,
    ProjectsControllerUpdateError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/projects/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Get a project API Key
 */
export const projectsControllerGenerateNewApiKey = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ProjectsControllerGenerateNewApiKeyData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ProjectsControllerGenerateNewApiKeyResponse,
    ProjectsControllerGenerateNewApiKeyError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/projects/{id}/generate-api-key',
    ...options,
  })
}

/**
 * Add first balance
 */
export const creditControllerAddFirstBalance = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<CreditControllerAddFirstBalanceData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    CreditControllerAddFirstBalanceResponse,
    CreditControllerAddFirstBalanceError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/Credit/first-balance',
    ...options,
  })
}

/**
 * User credit balance
 */
export const creditControllerBalance = <ThrowOnError extends boolean = false>(
  options?: Options<CreditControllerBalanceData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    CreditControllerBalanceResponse,
    CreditControllerBalanceError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/Credit/balance',
    ...options,
  })
}

/**
 * User credit transactions
 */
export const creditControllerTransactions = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<CreditControllerTransactionsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    CreditControllerTransactionsResponse,
    CreditControllerTransactionsError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/Credit/transactions',
    ...options,
  })
}

/**
 * Crawl a webpage
 */
export const applicationsControllerNewToken = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ApplicationsControllerNewTokenData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ApplicationsControllerNewTokenResponse,
    ApplicationsControllerNewTokenError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/applications/{id}/new-token',
    ...options,
  })
}

export const applicationsControllerChatToken = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ApplicationsControllerChatTokenData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ApplicationsControllerChatTokenResponse,
    ApplicationsControllerChatTokenError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/applications/{id}/chat-token',
    ...options,
  })
}

/**
 * Get all
 */
export const applicationsControllerFindAll = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<ApplicationsControllerFindAllData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ApplicationsControllerFindAllResponse,
    ApplicationsControllerFindAllError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/applications',
    ...options,
  })
}

/**
 * Create one.
 */
export const applicationsControllerCreate = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ApplicationsControllerCreateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    ApplicationsControllerCreateResponse,
    ApplicationsControllerCreateError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/applications',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Delete one by Id.
 */
export const applicationsControllerDelete = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ApplicationsControllerDeleteData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    ApplicationsControllerDeleteResponse,
    ApplicationsControllerDeleteError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/applications/{id}',
    ...options,
  })
}

/**
 * Get one by Id.
 */
export const applicationsControllerFindOne = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ApplicationsControllerFindOneData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ApplicationsControllerFindOneResponse,
    ApplicationsControllerFindOneError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/applications/{id}',
    ...options,
  })
}

/**
 * Update one by Id.
 */
export const applicationsControllerUpdate = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ApplicationsControllerUpdateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    ApplicationsControllerUpdateResponse,
    ApplicationsControllerUpdateError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/applications/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Get all by Project Id
 */
export const projectsApplicationsControllerFindAllByProjectId = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    ProjectsApplicationsControllerFindAllByProjectIdData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    ProjectsApplicationsControllerFindAllByProjectIdResponse,
    ProjectsApplicationsControllerFindAllByProjectIdError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/projects/{id}/applications',
    ...options,
  })
}

/**
 *  This operation creates user.
 */
export const authControllerRegister = <ThrowOnError extends boolean = false>(
  options: Options<AuthControllerRegisterData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    AuthControllerRegisterResponse,
    AuthControllerRegisterError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
    ],
    url: '/auth/register',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 *  Performs login operation.
 */
export const authControllerLogin = <ThrowOnError extends boolean = false>(
  options: Options<AuthControllerLoginData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    AuthControllerLoginResponse,
    AuthControllerLoginError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
    ],
    url: '/auth/login',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Refresh token
 */
export const authControllerRefresh = <ThrowOnError extends boolean = false>(
  options?: Options<AuthControllerRefreshData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    AuthControllerRefreshResponse,
    AuthControllerRefreshError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/auth/refresh',
    ...options,
  })
}

export const authControllerUnVerifiedAccounts = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<AuthControllerUnVerifiedAccountsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    AuthControllerUnVerifiedAccountsResponse,
    AuthControllerUnVerifiedAccountsError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/auth/verify',
    ...options,
  })
}

export const authControllerResendVerify = <
  ThrowOnError extends boolean = false,
>(
  options: Options<AuthControllerResendVerifyData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    AuthControllerResendVerifyResponse,
    AuthControllerResendVerifyError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/auth/verify',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Verify
 */
export const authControllerVerify = <ThrowOnError extends boolean = false>(
  options?: Options<AuthControllerVerifyData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    AuthControllerVerifyResponse,
    AuthControllerVerifyError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/auth/verify',
    ...options,
  })
}

export const authControllerRecovery = <ThrowOnError extends boolean = false>(
  options: Options<AuthControllerRecoveryData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    AuthControllerRecoveryResponse,
    AuthControllerRecoveryError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
    ],
    url: '/auth/recovery',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 *  Reset password !
 */
export const authControllerReset = <ThrowOnError extends boolean = false>(
  options: Options<AuthControllerResetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    AuthControllerResetResponse,
    AuthControllerResetError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/auth/reset',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 *  Logout from system !
 */
export const authControllerLogout = <ThrowOnError extends boolean = false>(
  options?: Options<AuthControllerLogoutData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    AuthControllerLogoutResponse,
    AuthControllerLogoutError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/auth/logout',
    ...options,
  })
}

/**
 * Change password
 */
export const authControllerChangePassword = <
  ThrowOnError extends boolean = false,
>(
  options: Options<AuthControllerChangePasswordData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    AuthControllerChangePasswordResponse,
    AuthControllerChangePasswordError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/auth/change-password',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 *  Get account info by request
 */
export const authControllerAccountInfo = <ThrowOnError extends boolean = false>(
  options?: Options<AuthControllerAccountInfoData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    AuthControllerAccountInfoResponse,
    AuthControllerAccountInfoError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/auth/account/info',
    ...options,
  })
}

/**
 *  Update account info
 */
export const authControllerUpdateAccountInfo = <
  ThrowOnError extends boolean = false,
>(
  options: Options<AuthControllerUpdateAccountInfoData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    AuthControllerUpdateAccountInfoResponse,
    AuthControllerUpdateAccountInfoError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/auth/account/info',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 *  Update role from Newbie to User
 */
export const authControllerRoleDrop = <ThrowOnError extends boolean = false>(
  options?: Options<AuthControllerRoleDropData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).patch<
    AuthControllerRoleDropResponse,
    AuthControllerRoleDropError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/auth/role-drop',
    ...options,
  })
}

/**
 *  It changes user activate state.
 */
export const authControllerDeactivate = <ThrowOnError extends boolean = false>(
  options?: Options<AuthControllerDeactivateData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).patch<
    AuthControllerDeactivateResponse,
    AuthControllerDeactivateError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/auth/deactivate',
    ...options,
  })
}

/**
 *  List all sessions.
 */
export const authControllerSessions = <ThrowOnError extends boolean = false>(
  options?: Options<AuthControllerSessionsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    AuthControllerSessionsResponse,
    AuthControllerSessionsError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/auth/sessions',
    ...options,
  })
}

/**
 *  List sessions of user.
 */
export const authControllerLoginActivity = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<AuthControllerLoginActivityData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    AuthControllerLoginActivityResponse,
    AuthControllerLoginActivityError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/auth/login-activity',
    ...options,
  })
}

/**
 *  Drop a specific session.
 */
export const authControllerDrop = <ThrowOnError extends boolean = false>(
  options: Options<AuthControllerDropData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    AuthControllerDropResponse,
    AuthControllerDropError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/auth/drop/{key}',
    ...options,
  })
}

/**
 *  Update username or register it.
 */
export const authControllerSetUsername = <ThrowOnError extends boolean = false>(
  options: Options<AuthControllerSetUsernameData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    AuthControllerSetUsernameResponse,
    AuthControllerSetUsernameError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/auth/username',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 *  Bans user by id
 */
export const authControllerBan = <ThrowOnError extends boolean = false>(
  options: Options<AuthControllerBanData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    AuthControllerBanResponse,
    AuthControllerBanError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/auth/ban',
    ...options,
  })
}

/**
 * It takes wallet address and signature and return token
 */
export const walletControllerAuthenticate = <
  ThrowOnError extends boolean = false,
>(
  options: Options<WalletControllerAuthenticateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    WalletControllerAuthenticateResponse,
    WalletControllerAuthenticateError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
    ],
    url: '/auth/wallet',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Get metamask message to login
 */
export const walletControllerGetMetamaskLoginMessage = <
  ThrowOnError extends boolean = false,
>(
  options: Options<WalletControllerGetMetamaskLoginMessageData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    WalletControllerGetMetamaskLoginMessageResponse,
    WalletControllerGetMetamaskLoginMessageError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
    ],
    url: '/auth/wallet/metamaskloginmessage',
    ...options,
  })
}

/**
 * It deletes wallet from user accounts
 */
export const walletControllerDisconnectWallet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<WalletControllerDisconnectWalletData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    WalletControllerDisconnectWalletResponse,
    WalletControllerDisconnectWalletError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/auth/wallet/disconnect',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * It takes wallet address and signature and return token
 */
export const walletControllerConnectWallet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<WalletControllerConnectWalletData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    WalletControllerConnectWalletResponse,
    WalletControllerConnectWalletError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/auth/wallet/connect',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Verification
 */
export const verificationControllerVerify = <
  ThrowOnError extends boolean = false,
>(
  options: Options<VerificationControllerVerifyData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    VerificationControllerVerifyResponse,
    VerificationControllerVerifyError,
    ThrowOnError
  >({
    url: '/verification',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Get all
 */
export const configurationControllerFindAll = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<ConfigurationControllerFindAllData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ConfigurationControllerFindAllResponse,
    ConfigurationControllerFindAllError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/configurations',
    ...options,
  })
}

/**
 * Create one.
 */
export const configurationControllerCreate = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ConfigurationControllerCreateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    ConfigurationControllerCreateResponse,
    ConfigurationControllerCreateError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/configurations',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Delete one by Id.
 */
export const configurationControllerDelete = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ConfigurationControllerDeleteData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    ConfigurationControllerDeleteResponse,
    ConfigurationControllerDeleteError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/configurations/{id}',
    ...options,
  })
}

/**
 * Get one by Id.
 */
export const configurationControllerFindOne = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ConfigurationControllerFindOneData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ConfigurationControllerFindOneResponse,
    ConfigurationControllerFindOneError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/configurations/{id}',
    ...options,
  })
}

/**
 * Update one by Id.
 */
export const configurationControllerUpdate = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ConfigurationControllerUpdateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    ConfigurationControllerUpdateResponse,
    ConfigurationControllerUpdateError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/configurations/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Remove specific account by user id.
 */
export const accountsControllerRemove = <ThrowOnError extends boolean = false>(
  options: Options<AccountsControllerRemoveData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    AccountsControllerRemoveResponse,
    AccountsControllerRemoveError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/users/accounts',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 *  Find specific accounts by user id.
 */
export const accountsControllerFind = <ThrowOnError extends boolean = false>(
  options: Options<AccountsControllerFindData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    AccountsControllerFindResponse,
    AccountsControllerFindError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/users/accounts',
    ...options,
  })
}

/**
 * Update an account by user id.
 */
export const accountsControllerUpdate = <ThrowOnError extends boolean = false>(
  options: Options<AccountsControllerUpdateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    AccountsControllerUpdateResponse,
    AccountsControllerUpdateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/users/accounts',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 *  Add new account to user.
 */
export const accountsControllerAdd = <ThrowOnError extends boolean = false>(
  options: Options<AccountsControllerAddData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    AccountsControllerAddResponse,
    AccountsControllerAddError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/users/accounts',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Set as primary.
 */
export const accountsControllerSetPrimary = <
  ThrowOnError extends boolean = false,
>(
  options: Options<AccountsControllerSetPrimaryData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    AccountsControllerSetPrimaryResponse,
    AccountsControllerSetPrimaryError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/users/accounts/set-primary',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Add first balance
 */
export const usersControllerAddFirstBalance = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<UsersControllerAddFirstBalanceData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    UsersControllerAddFirstBalanceResponse,
    UsersControllerAddFirstBalanceError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/users/first-balance',
    ...options,
  })
}

/**
 * Find all.
 */
export const usersControllerFindAll = <ThrowOnError extends boolean = false>(
  options?: Options<UsersControllerFindAllData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    UsersControllerFindAllResponse,
    UsersControllerFindAllError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/users',
    ...options,
  })
}

/**
 * Create one.
 */
export const usersControllerCreate = <ThrowOnError extends boolean = false>(
  options: Options<UsersControllerCreateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    UsersControllerCreateResponse,
    UsersControllerCreateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/users',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Delete one by Id.
 */
export const usersControllerDelete = <ThrowOnError extends boolean = false>(
  options: Options<UsersControllerDeleteData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    UsersControllerDeleteResponse,
    UsersControllerDeleteError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/users/{id}',
    ...options,
  })
}

/**
 * Get one by Id.
 */
export const usersControllerFindOne = <ThrowOnError extends boolean = false>(
  options: Options<UsersControllerFindOneData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    UsersControllerFindOneResponse,
    UsersControllerFindOneError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/users/{id}',
    ...options,
  })
}

/**
 * Update one by Id.
 */
export const usersControllerUpdate = <ThrowOnError extends boolean = false>(
  options: Options<UsersControllerUpdateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    UsersControllerUpdateResponse,
    UsersControllerUpdateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/users/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Change user role if have permission
 */
export const usersControllerChangeUserRole = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UsersControllerChangeUserRoleData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    UsersControllerChangeUserRoleResponse,
    UsersControllerChangeUserRoleError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/users/change-role/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Change password
 */
export const usersControllerChangePassword = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UsersControllerChangePasswordData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    UsersControllerChangePasswordResponse,
    UsersControllerChangePasswordError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/users/{id}/change-password',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

export const profileControllerGetUserAvatar = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<ProfileControllerGetUserAvatarData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ProfileControllerGetUserAvatarResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/profile/avatar',
    ...options,
  })
}

export const profileControllerUploadUserAvatar = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ProfileControllerUploadUserAvatarData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    ProfileControllerUploadUserAvatarResponse,
    unknown,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/profile/avatar',
    ...options,
    headers: {
      'Content-Type': null,
      ...options?.headers,
    },
  })
}

/**
 * Public profile
 */
export const profileControllerFindPublicOne = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ProfileControllerFindPublicOneData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ProfileControllerFindPublicOneResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
    ],
    url: '/profile/public/{username}',
    ...options,
  })
}

/**
 *  Find specific user detail by profile id.
 */
export const profileControllerGetUserDetailsWithAdmin = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ProfileControllerGetUserDetailsWithAdminData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ProfileControllerGetUserDetailsWithAdminResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/profile/{id}/admin',
    ...options,
  })
}

/**
 * Search for User
 */
export const profileControllerSearch = <ThrowOnError extends boolean = false>(
  options?: Options<ProfileControllerSearchData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ProfileControllerSearchResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/profile/search',
    ...options,
  })
}

/**
 * Get all
 */
export const profileControllerFindAll = <ThrowOnError extends boolean = false>(
  options?: Options<ProfileControllerFindAllData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ProfileControllerFindAllResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/profile',
    ...options,
  })
}

/**
 *  Find specific user detail by profile id.
 */
export const profileControllerFindOne = <ThrowOnError extends boolean = false>(
  options: Options<ProfileControllerFindOneData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ProfileControllerFindOneResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/profile/{id}',
    ...options,
  })
}

export const fileControllerUpload = <ThrowOnError extends boolean = false>(
  options: Options<FileControllerUploadData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    FileControllerUploadResponse,
    unknown,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/file/upload',
    ...options,
    headers: {
      'Content-Type': null,
      ...options?.headers,
    },
  })
}

/**
 * Get tag cloud.
 */
export const notesControllerGetTagCloud = <
  ThrowOnError extends boolean = false,
>(
  options: Options<NotesControllerGetTagCloudData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    NotesControllerGetTagCloudResponse,
    NotesControllerGetTagCloudError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
    ],
    url: '/notes/tag-cloud/{domain}',
    ...options,
  })
}

/**
 * Get tag cloud by Category.
 */
export const notesControllerGetTagCloudByCategory = <
  ThrowOnError extends boolean = false,
>(
  options: Options<NotesControllerGetTagCloudByCategoryData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    NotesControllerGetTagCloudByCategoryResponse,
    NotesControllerGetTagCloudByCategoryError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
    ],
    url: '/notes/tag-cloud/{category}/{domain}',
    ...options,
  })
}

/**
 * Get one by Slug.
 */
export const notesControllerFindOneBySlug = <
  ThrowOnError extends boolean = false,
>(
  options: Options<NotesControllerFindOneBySlugData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    NotesControllerFindOneBySlugResponse,
    NotesControllerFindOneBySlugError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
    ],
    url: '/notes/by-slug/{slug}/{domain}',
    ...options,
  })
}

/**
 * Get last draft.
 */
export const notesControllerGetDraft = <ThrowOnError extends boolean = false>(
  options?: Options<NotesControllerGetDraftData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    NotesControllerGetDraftResponse,
    NotesControllerGetDraftError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/notes/draft',
    ...options,
  })
}

/**
 * File upload.
 */
export const notesControllerFileUpload = <ThrowOnError extends boolean = false>(
  options: Options<NotesControllerFileUploadData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    NotesControllerFileUploadResponse,
    NotesControllerFileUploadError,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/notes/{note}/files',
    ...options,
    headers: {
      'Content-Type': null,
      ...options?.headers,
    },
  })
}

/**
 * Update one by Id.
 */
export const notesControllerFileUpdate = <ThrowOnError extends boolean = false>(
  options: Options<NotesControllerFileUpdateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    NotesControllerFileUpdateResponse,
    NotesControllerFileUpdateError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/notes/{note}/files/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Get all by Category
 */
export const notesControllerFindAllByCategory = <
  ThrowOnError extends boolean = false,
>(
  options: Options<NotesControllerFindAllByCategoryData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    NotesControllerFindAllByCategoryResponse,
    NotesControllerFindAllByCategoryError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
    ],
    url: '/notes/by-category/{category}/{domain}',
    ...options,
  })
}

/**
 * Get all by Tag
 */
export const notesControllerFindAllByTag = <
  ThrowOnError extends boolean = false,
>(
  options: Options<NotesControllerFindAllByTagData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    NotesControllerFindAllByTagResponse,
    NotesControllerFindAllByTagError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
    ],
    url: '/notes/by-tag/{tag}/{domain}',
    ...options,
  })
}

/**
 * Get all by Tags
 */
export const notesControllerFindAllByTags = <
  ThrowOnError extends boolean = false,
>(
  options: Options<NotesControllerFindAllByTagsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    NotesControllerFindAllByTagsResponse,
    NotesControllerFindAllByTagsError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
    ],
    url: '/notes/by-tags/{tags}/{domain}',
    ...options,
  })
}

/**
 * Get all by Domain
 */
export const notesControllerFindAllByDomain = <
  ThrowOnError extends boolean = false,
>(
  options: Options<NotesControllerFindAllByDomainData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    NotesControllerFindAllByDomainResponse,
    NotesControllerFindAllByDomainError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
    ],
    url: '/notes/by-domain/{domain}',
    ...options,
  })
}

/**
 * Get all
 */
export const notesControllerFindAll = <ThrowOnError extends boolean = false>(
  options?: Options<NotesControllerFindAllData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    NotesControllerFindAllResponse,
    NotesControllerFindAllError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
    ],
    url: '/notes',
    ...options,
  })
}

/**
 * Create one.
 */
export const notesControllerCreate = <ThrowOnError extends boolean = false>(
  options: Options<NotesControllerCreateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    NotesControllerCreateResponse,
    NotesControllerCreateError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
    ],
    url: '/notes',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Upsert one.
 */
export const notesControllerUpsert = <ThrowOnError extends boolean = false>(
  options: Options<NotesControllerUpsertData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    NotesControllerUpsertResponse,
    NotesControllerUpsertError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/notes',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Delete one by Id.
 */
export const notesControllerDelete = <ThrowOnError extends boolean = false>(
  options: Options<NotesControllerDeleteData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    NotesControllerDeleteResponse,
    NotesControllerDeleteError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/notes/{id}',
    ...options,
  })
}

/**
 * Get one by Id.
 */
export const notesControllerFindOne = <ThrowOnError extends boolean = false>(
  options: Options<NotesControllerFindOneData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    NotesControllerFindOneResponse,
    NotesControllerFindOneError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
    ],
    url: '/notes/{id}',
    ...options,
  })
}

/**
 * Update one by Id.
 */
export const notesControllerUpdate = <ThrowOnError extends boolean = false>(
  options: Options<NotesControllerUpdateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    NotesControllerUpdateResponse,
    NotesControllerUpdateError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
    ],
    url: '/notes/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Search in notes
 */
export const gptControllerSearch = <ThrowOnError extends boolean = false>(
  options: Options<GptControllerSearchData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GptControllerSearchResponse,
    GptControllerSearchError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
    ],
    url: '/gpt',
    ...options,
  })
}

/**
 * Create a blank note and get the ID for update.
 */
export const gptControllerGptCreateNote = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GptControllerGptCreateNoteData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    GptControllerGptCreateNoteResponse,
    GptControllerGptCreateNoteError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
    ],
    url: '/gpt',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Get one by Id.
 */
export const gptControllerFindOne = <ThrowOnError extends boolean = false>(
  options: Options<GptControllerFindOneData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GptControllerFindOneResponse,
    GptControllerFindOneError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
    ],
    url: '/gpt/{id}',
    ...options,
  })
}

/**
 * Update one by Id.
 */
export const gptControllerUpdate = <ThrowOnError extends boolean = false>(
  options: Options<GptControllerUpdateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    GptControllerUpdateResponse,
    GptControllerUpdateError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
    ],
    url: '/gpt/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Upload files from OpenAI references. If has download_link, it will be used.
 */
export const gptControllerUploadOpenAiFiles = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GptControllerUploadOpenAiFilesData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    GptControllerUploadOpenAiFilesResponse,
    GptControllerUploadOpenAiFilesError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
    ],
    url: '/gpt/{id}/files',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Update a file  by noteId and fileId.
 */
export const gptControllerFileUpdate = <ThrowOnError extends boolean = false>(
  options: Options<GptControllerFileUpdateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    GptControllerFileUpdateResponse,
    GptControllerFileUpdateError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
    ],
    url: '/gpt/{id}/files/{fileId}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Request an analysis
 */
export const seoControllerAnalyse = <ThrowOnError extends boolean = false>(
  options: Options<SeoControllerAnalyseData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    SeoControllerAnalyseResponse,
    SeoControllerAnalyseError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/seo/analyse',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Get a report
 */
export const seoControllerGet = <ThrowOnError extends boolean = false>(
  options: Options<SeoControllerGetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    SeoControllerGetResponse,
    SeoControllerGetError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/seo/reports/{id}',
    ...options,
  })
}

/**
 * Force to re generate a report
 */
export const seoControllerForce = <ThrowOnError extends boolean = false>(
  options: Options<SeoControllerForceData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    SeoControllerForceResponse,
    SeoControllerForceError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/seo/force/{id}',
    ...options,
  })
}

/**
 * Get workspace
 */
export const seoControllerGetWorkspace = <ThrowOnError extends boolean = false>(
  options?: Options<SeoControllerGetWorkspaceData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    SeoControllerGetWorkspaceResponse,
    SeoControllerGetWorkspaceError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/seo/workspace',
    ...options,
  })
}

/**
 * Get page data
 */
export const seoControllerGetPageData = <ThrowOnError extends boolean = false>(
  options: Options<SeoControllerGetPageDataData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    SeoControllerGetPageDataResponse,
    SeoControllerGetPageDataError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/seo/page/{id}',
    ...options,
  })
}

/**
 * Get page-term data
 */
export const seoControllerGetPageTermData = <
  ThrowOnError extends boolean = false,
>(
  options: Options<SeoControllerGetPageTermDataData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    SeoControllerGetPageTermDataResponse,
    SeoControllerGetPageTermDataError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/seo/page-term/{id}',
    ...options,
  })
}

/**
 * Send to Ptt
 */
export const pttControllerPtt = <ThrowOnError extends boolean = false>(
  options: Options<PttControllerPttData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    PttControllerPttResponse,
    PttControllerPttError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/ptt/{id}/ptt',
    ...options,
  })
}

/**
 * Get a new barcode
 */
export const pttControllerGetBarcode = <ThrowOnError extends boolean = false>(
  options: Options<PttControllerGetBarcodeData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    PttControllerGetBarcodeResponse,
    PttControllerGetBarcodeError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/ptt/{project}/barcode',
    ...options,
  })
}

/**
 * Get all
 */
export const pttControllerFindAll = <ThrowOnError extends boolean = false>(
  options?: Options<PttControllerFindAllData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    PttControllerFindAllResponse,
    PttControllerFindAllError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/ptt',
    ...options,
  })
}

/**
 * Create one.
 */
export const pttControllerCreate = <ThrowOnError extends boolean = false>(
  options: Options<PttControllerCreateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PttControllerCreateResponse,
    PttControllerCreateError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/ptt',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Delete one by Id.
 */
export const pttControllerDelete = <ThrowOnError extends boolean = false>(
  options: Options<PttControllerDeleteData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    PttControllerDeleteResponse,
    PttControllerDeleteError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/ptt/{id}',
    ...options,
  })
}

/**
 * Get one by Id.
 */
export const pttControllerFindOne = <ThrowOnError extends boolean = false>(
  options: Options<PttControllerFindOneData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    PttControllerFindOneResponse,
    PttControllerFindOneError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/ptt/{id}',
    ...options,
  })
}

/**
 * Update one by Id.
 */
export const pttControllerUpdate = <ThrowOnError extends boolean = false>(
  options: Options<PttControllerUpdateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    PttControllerUpdateResponse,
    PttControllerUpdateError,
    ThrowOnError
  >({
    security: [
      {
        name: 'ApiKey',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/ptt/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}
